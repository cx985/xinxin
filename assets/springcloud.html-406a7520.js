import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as l,e as i}from"./app-57970fd2.js";const s="/assets/image-20240414164111402-62600cda.png",e="/assets/image-20240414164202806-229eea10.png",t={},o=i(`<h1 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud" aria-hidden="true">#</a> SpringCloud</h1><h2 id="_1-springcloud-对应的组件" tabindex="-1"><a class="header-anchor" href="#_1-springcloud-对应的组件" aria-hidden="true">#</a> 1. springcloud 对应的组件？</h2><ul><li><p>服务注册发现</p><ul><li>nacos （cloud alibaba）</li><li>consul （cloud最新）</li><li>eureka (淘汰)</li></ul></li><li><p>负载均衡</p><ul><li>LoadBalancer (cloud最新)</li><li>ribbon (淘汰)</li></ul></li><li><p>服务调用</p><ul><li>openFeign</li></ul></li><li><p>断路器</p><ul><li>CircuitBreaker （cloud最新）</li><li>hystrix (淘汰)</li></ul></li><li><p>网关</p><ul><li>gateway</li></ul></li><li><p>分布式链路追踪</p><ul><li>Sleuth(Micrometer) + ZipKin</li></ul></li><li><p>SpringCloud Alibaba Nacos</p><ul><li>服务注册和配置中心</li></ul></li><li><p>SpringCloud Alibaba Sentinel</p><ul><li>服务的熔断和限流</li></ul></li><li><p>SpringCloud Alibaba Seata</p><ul><li>分布式事务</li></ul></li></ul><h2 id="_2-cap-base理论" tabindex="-1"><a class="header-anchor" href="#_2-cap-base理论" aria-hidden="true">#</a> 2. CAP&amp;BASE理论</h2><h3 id="_1-cap" tabindex="-1"><a class="header-anchor" href="#_1-cap" aria-hidden="true">#</a> 1. CAP</h3><ul><li><p>Consistency</p><ul><li>一致性</li><li>所有节点访问同一份最新的数据副本</li></ul></li><li><p>Availability</p><ul><li>可用性</li><li>非故障的节点在合理的时间内返回合理的响应</li></ul></li><li><p>Partition Tolerance</p><ul><li>分区容错性</li><li>分布式系统出现网络分区的时候，仍然能够对外提供服务</li></ul></li><li><p><strong>CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C</strong></p></li><li><p>常见注册中心</p><ul><li>zookeeper保证的是cp <ul><li>任何时刻对 ZooKeeper 的读请求都能得到一致性的结果</li><li>zookeeper 不保证每次请求的可用性</li></ul></li><li>eureka保证的是ap <ul><li>Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了</li></ul></li><li>nacos 支持ap和cp</li></ul></li></ul><h3 id="_2-base理论" tabindex="-1"><a class="header-anchor" href="#_2-base理论" aria-hidden="true">#</a> 2. BASE理论</h3><ul><li>Basically Available <ul><li>基本可用</li><li>分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用</li></ul></li><li>Soft-state <ul><li>软状态</li><li>允许系统中的数据存在中间状态（<strong>CAP 理论中的数据不一致</strong>），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时</li></ul></li><li>Eventually Consistent <ul><li>最终一致性</li><li>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态</li></ul></li><li>核心思想 <ul><li>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性</li></ul></li></ul><h2 id="_3-springcloud-gateway" tabindex="-1"><a class="header-anchor" href="#_3-springcloud-gateway" aria-hidden="true">#</a> 3. SpringCloud Gateway</h2><h3 id="_1-spring-cloud-gateway-支持限流吗" tabindex="-1"><a class="header-anchor" href="#_1-spring-cloud-gateway-支持限流吗" aria-hidden="true">#</a> 1. spring cloud gateway 支持限流吗</h3><ul><li><p>支持，限流是一种常见的微服务网关功能，用于控制对后端服务的请求流量，以防止过载和保护后端服务</p></li><li><p>内置的限流过滤器是基于令牌桶算法或漏桶算法实现的</p><ul><li>令牌桶算法：允许一定的突发流量</li><li>漏桶算法则可以平滑请求流量</li></ul></li><li><p>实现</p><ul><li><p>方法一</p><ul><li><p>使用RequestRateLimiterGatewayFilterFactory来配置基于令牌桶算法的限流策略</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> my_route
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.org
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> Path=/foo/<span class="token important">**</span>
          <span class="token key atrule">filters</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> RequestRateLimiter
              <span class="token key atrule">args</span><span class="token punctuation">:</span>
                <span class="token key atrule">key-resolver</span><span class="token punctuation">:</span> <span class="token string">&quot;#{@userKeyResolver}&quot;</span>
                <span class="token key atrule">redis-rate-limiter.replenishRate</span><span class="token punctuation">:</span> <span class="token number">1</span>
                <span class="token key atrule">redis-rate-limiter.burstCapacity</span><span class="token punctuation">:</span> <span class="token number">3</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>方法二</p><ul><li><p>自定义限流过滤器，实现GatewayFilter接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRateLimiterFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GatewayFilter</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>
    <span class="token comment">// 实现限流逻辑</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="_4-分布式id" tabindex="-1"><a class="header-anchor" href="#_4-分布式id" aria-hidden="true">#</a> 4. 分布式ID</h2><h3 id="_1-雪花算法" tabindex="-1"><a class="header-anchor" href="#_1-雪花算法" aria-hidden="true">#</a> 1. 雪花算法</h3><p>雪花算法（Snowflake）是一种分布式唯一ID生成算法，它的实现原理是基于Twitter的Snowflake算法。Snowflake算法的核心思想是将一个64位的整数ID分成三部分：时间戳、机器ID和序列号。具体实现如下：</p><ol><li><p>时间戳部分（41位）：记录生成ID的时间，精确到毫秒级，可以用69年。</p></li><li><p>机器ID部分（10位）：记录机器的ID，可以分配1024台机器。</p></li><li><p>序列号部分（12位）：记录同一毫秒内生成的ID序号，可以生成4096个ID。</p></li></ol><p>Snowflake算法的优点包括：</p><ol><li><p>分布式唯一性：每个ID都是唯一的，且可以在分布式系统中生成。</p></li><li><p>高性能：生成ID的速度很快，不会影响系统的性能。</p></li><li><p>简单易用：Snowflake算法的实现比较简单，可以轻松集成到各种系统中。</p></li></ol><p>Snowflake算法的缺点包括：</p><ol><li><p>时钟回拨问题：如果系统时钟发生回拨，可能会导致生成的ID不唯一。</p></li><li><p>依赖机器ID：需要为每台机器分配一个唯一的ID，如果机器数量过多会增加管理成本。</p></li><li><p>有限的时间范围：由于时间戳部分只有41位，所以Snowflake算法能够使用的时间范围是有限的。</p></li></ol><p>总的来说，雪花算法是一种简单高效的分布式ID生成算法，适用于大多数分布式系统。但在实际应用中需要注意时钟回拨问题和机器ID的管理。</p><h3 id="_2-美团叶子算法" tabindex="-1"><a class="header-anchor" href="#_2-美团叶子算法" aria-hidden="true">#</a> 2. 美团叶子算法</h3><ul><li>leaf- 解决了雪花算法时钟回拨问题</li></ul><h2 id="_5-分布式锁" tabindex="-1"><a class="header-anchor" href="#_5-分布式锁" aria-hidden="true">#</a> 5. 分布式锁</h2><ul><li>redisson</li></ul><h2 id="_6-分布式事务" tabindex="-1"><a class="header-anchor" href="#_6-分布式事务" aria-hidden="true">#</a> 6. 分布式事务</h2><h3 id="_1-2pc-3pc-tcc了解么" tabindex="-1"><a class="header-anchor" href="#_1-2pc-3pc-tcc了解么" aria-hidden="true">#</a> 1. 2PC 3PC TCC了解么</h3><ul><li><p>2pc</p><ul><li><p>两阶段提交，将事务的提交过程分为资源准备和资源提交提交两个阶段，并且由事务协调者来协调所有事物参与者；如果准备阶段所有事物参与者都预留资源成功，则进行第二阶段的资源提交，否则事物协调者回滚资源</p></li><li><p>第一阶段：准备阶段</p></li><li><p>第二阶段：提交阶段</p><ul><li>事物的提交</li><li>事物的回滚</li></ul></li><li><p>缺点</p><ul><li>性能问题</li><li>可靠性问题</li><li>数据一致性问题</li><li>二阶段无法解决的问题 <ul><li>协调者在发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了，那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交</li></ul></li></ul></li></ul></li><li><p>3pc</p><ul><li><p>三阶段提交协议</p></li><li><p>对2pc的改进，在第一阶段和第二阶段中插入了一个准备阶段</p></li><li><p>在协调者和参与者中引入超时机制</p></li><li><p>3pc会分为3个阶段</p><ul><li>准备阶段</li><li>预提交阶段 <ul><li>执行事务</li><li>或者中断事务</li></ul></li><li>提交阶段 <ul><li>提交事务</li><li>或者中断事务</li></ul></li></ul></li><li><p>优缺点</p><ul><li>优点 <ul><li>降低了阻塞范围，并且在等待超时后，协调者或参与者会中断事务，避免了协调者单点问题，</li></ul></li><li>缺点 <ul><li>数据不一致问题依然存在</li></ul></li></ul></li></ul></li><li><p>TCC</p><ul><li><p>全称：Try Confirm Cancel；是应用层的两阶段提交</p></li><li><p>核心思想</p><ul><li>针对每个操作，都要实现对应的确认和补偿操作，也就是业务逻辑的每个分支都需要实现try、confirm、cancel三个操作</li></ul></li><li><p>tcc的执行流程可以分为两个阶段</p><ul><li>第一阶段 <ul><li>try: 业务系统做检测并预留资源，比如常见的下单，在try阶段是将下单的库存给锁住</li></ul></li><li>第二阶段 <ul><li>根据第一阶段的结果决定是执行confirm还是cancel</li><li>cnonfirm : 执行真正的业务</li><li>cancle: 是对try阶段预留资源的释放（出问题，释放锁）</li></ul></li></ul></li></ul></li></ul><h2 id="_7-负载均衡" tabindex="-1"><a class="header-anchor" href="#_7-负载均衡" aria-hidden="true">#</a> 7. 负载均衡</h2><h3 id="_1-负载均衡算法" tabindex="-1"><a class="header-anchor" href="#_1-负载均衡算法" aria-hidden="true">#</a> 1. 负载均衡算法</h3><ul><li>随机法</li><li>轮询</li><li>加权轮询</li><li>加权随机</li><li>最小并发连接</li><li>哈希算法</li></ul><h2 id="_8-服务限流" tabindex="-1"><a class="header-anchor" href="#_8-服务限流" aria-hidden="true">#</a> 8. 服务限流</h2><h3 id="_1-固定窗口计数器算法" tabindex="-1"><a class="header-anchor" href="#_1-固定窗口计数器算法" aria-hidden="true">#</a> 1. 固定窗口计数器算法</h3><ul><li>固定窗口其实就是时间窗口，固定窗口计数器算法规定了单位时间处理的请求数量</li><li>不推荐使用，体验差</li></ul><h3 id="_2-滑动窗口计数器算法" tabindex="-1"><a class="header-anchor" href="#_2-滑动窗口计数器算法" aria-hidden="true">#</a> 2. 滑动窗口计数器算法</h3><ul><li>是固定窗口计数器的升级版</li><li>它把时间以一定比例分配</li><li>当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精准</li></ul><h3 id="_3-漏桶算法" tabindex="-1"><a class="header-anchor" href="#_3-漏桶算法" aria-hidden="true">#</a> 3.漏桶算法</h3><ul><li>我们可以把发请求的动作比作成注水到桶中，我们处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率</li><li>漏桶算法强制限制数据的传输速率，使其保持稳定，不允许突发流量，即无论系统的处理能力如何，流出速率总是稳定的，无法处理超过预设速率的突发请求</li></ul><h3 id="_4-令牌桶算法" tabindex="-1"><a class="header-anchor" href="#_4-令牌桶算法" aria-hidden="true">#</a> 4. 令牌桶算法</h3><ol><li><p>基本原理：</p><ul><li>令牌桶算法维护一个固定容量的桶，桶中以固定速率生成令牌，每个令牌代表一个请求的处理权限。</li><li>当请求到达时，需要从桶中获取一个令牌，如果桶中有足够的令牌，则允许处理该请求；如果桶中没有足够的令牌，则拒绝该请求或者将请求放入队列中等待令牌。</li><li>桶中的令牌数量有上限，如果桶满了，新生成的令牌将被丢弃。</li></ul></li><li><p>实现限流的设计过程：</p><ul><li>初始化令牌桶，设置桶的容量和令牌生成速率。</li><li>定时以固定速率向桶中添加令牌，直到桶满为止。</li><li>当请求到达时，尝试从桶中获取一个令牌，如果成功则处理该请求，否则拒绝请求或者将请求放入队列中等待。</li></ul></li><li><p>不足之处：</p><ul><li>令牌桶算法需要定时地生成令牌，这可能会引入额外的系统开销。</li><li>令牌过期问题</li><li>令牌生成速率预先设定</li></ul></li><li><p>更好的方案：</p><ul><li>漏桶算法与令牌桶算法类似，也是用于流量整形和限速。不同的是，漏桶算法对流入的请求均匀流出，不管请求何时到达，都按固定速率处理。它可以严格控制数据发送速率，且不会允许突发流量，适用于对输出速率有稳定要求且不允许突刺的场景。</li></ul></li></ol><h2 id="_9-openfeigin" tabindex="-1"><a class="header-anchor" href="#_9-openfeigin" aria-hidden="true">#</a> 9 . openFeigin</h2><h3 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用" aria-hidden="true">#</a> 1. 使用</h3><ul><li>主启动类增加 @EnableFeiginClients</li><li>业务逻辑接口 @FeignClient</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentFeignService</span>
<span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/payment/get/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-超时时间" tabindex="-1"><a class="header-anchor" href="#_2-超时时间" aria-hidden="true">#</a> 2. 超时时间</h3><ul><li>openFeigin默认的超时时间是1秒钟。这意味着如果调用的服务在1秒内没有响应，openFeign将会抛出超时异常，需要修改配置</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span>
       <span class="token comment">## 连接超时时间，设置了5秒</span>
        <span class="token key atrule">connectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
        <span class="token comment">## 读取的超时时间，设置了10秒</span>
        <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-feign调用的底层原理" tabindex="-1"><a class="header-anchor" href="#_3-feign调用的底层原理" aria-hidden="true">#</a> 3. feign调用的底层原理</h3><p>Feign是一个声明式的HTTP客户端，它使得编写Web服务客户端变得非常容易。在Spring Cloud中，Feign被用来实现服务间的调用，即微服务之间的RPC（Remote Procedure Call）通信。</p><p>Feign的底层主要依赖于 Ribbon 和 HTTP 客户端（如 Apache HttpClient 或 OkHttp）。其工作原理可以简单描述为：</p><ol><li><strong>动态代理</strong>：Feign通过JDK或CGLIB动态代理技术创建一个接口的实现类，这个实现类会包装请求方法，当调用这个方法时，实际上是在执行一个HTTP请求。</li><li><strong>编码/解码</strong>：对于方法参数，Feign会通过Encoder进行编码转换成适合HTTP传输的格式（如JSON、XML等），然后通过HTTP客户端发送请求。接收到响应后，再通过Decoder将HTTP响应内容解码成Java对象返回。</li><li><strong>负载均衡</strong>：Feign集成了Ribbon，能够实现客户端负载均衡，即在调用远程服务时，可以根据配置的负载均衡策略选择目标服务实例。</li><li><strong>Hystrix支持</strong>：默认情况下，Feign集成了Hystrix（可选配置），可以实现服务降级、熔断以及隔离等功能，提高系统的稳定性和容错性。</li><li><strong>超时与重试</strong>：通过Ribbon，Feign可以设置请求的超时时间和重试次数等策略。</li></ol><p>总结来说，Feign利用了Ribbon的客户端负载均衡和多种HTTP客户端库的能力，结合自己强大的API声明式定义和处理机制，使得服务间调用变得更加简洁、高效且易于维护。</p><h3 id="_4-feign-优化" tabindex="-1"><a class="header-anchor" href="#_4-feign-优化" aria-hidden="true">#</a> 4. feign 优化</h3><ul><li>超时设置优化</li><li>默认HttpClient修改为Apache HttpClient</li><li>对请求和响应进行GZIP压缩</li></ul><h2 id="_10-hystrix" tabindex="-1"><a class="header-anchor" href="#_10-hystrix" aria-hidden="true">#</a> 10 Hystrix</h2><h3 id="_1-服务降级" tabindex="-1"><a class="header-anchor" href="#_1-服务降级" aria-hidden="true">#</a> 1. 服务降级</h3><ul><li>定义 <ul><li>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</li></ul></li><li>哪些情况会发生降级 <ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li><li><strong>配置的降级策略生效</strong>：在一些框架（如Hystrix、Sentinel）中，可以根据预先设定的规则（如RT响应时间、QPS请求数量等）自动触发服务降级</li></ul></li></ul><h3 id="_2-服务熔断" tabindex="-1"><a class="header-anchor" href="#_2-服务熔断" aria-hidden="true">#</a> 2. 服务熔断</h3><ul><li><p>定义</p><ul><li><p>类似保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p></li><li><p>服务的降级--&gt;进而熔断--&gt;恢复调用链路</p></li></ul></li></ul><h3 id="_3-服务限流" tabindex="-1"><a class="header-anchor" href="#_3-服务限流" aria-hidden="true">#</a> 3. 服务限流</h3><ul><li>定义 <ul><li>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</li></ul></li></ul><h3 id="_4-注解" tabindex="-1"><a class="header-anchor" href="#_4-注解" aria-hidden="true">#</a> 4. 注解</h3><h4 id="_1-hystrixcommand" tabindex="-1"><a class="header-anchor" href="#_1-hystrixcommand" aria-hidden="true">#</a> 1. @HystrixCommand</h4><ul><li>服务降级</li><li>需要有一个兜底的方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;paymentInfo_TimeOutHandler&quot;</span><span class="token punctuation">,</span>commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">&quot;3000&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">paymentInfo_TimeOut</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-defaultproperties-defaultfallback" tabindex="-1"><a class="header-anchor" href="#_2-defaultproperties-defaultfallback" aria-hidden="true">#</a> 2. @DefaultProperties(defaultFallback = &quot;&quot;)</h4><ul><li>@HystrixCommand 需要在每个方法配置一个，太繁琐</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DefaultProperties</span><span class="token punctuation">(</span>defaultFallback <span class="token operator">=</span> <span class="token string">&quot;payment_Global_FallbackMethod&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentHystirxController</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-sentinel" tabindex="-1"><a class="header-anchor" href="#_11-sentinel" aria-hidden="true">#</a> 11. sentinel</h2><h3 id="_1-sentinelresource" tabindex="-1"><a class="header-anchor" href="#_1-sentinelresource" aria-hidden="true">#</a> 1. @SentinelResource</h3><ul><li><p>可以对资源进行限流、熔断、降级等操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;resourceName&quot;</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">&quot;handleBlock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法逻辑</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>@SentinelResource</code> 注解标识了 <code>getResource</code> 方法为 Sentinel 的资源，其中 <code>value</code> 属性指定了资源的名称。另外，通过 <code>blockHandler</code> 属性指定了当资源被流控时的处理方法，即 <code>handleBlock</code> 方法。这样就可以实现对资源的限流操作。</p><p>除了 <code>blockHandler</code> 属性外，<code>@SentinelResource</code> 注解还支持其他属性，比如 <code>fallback</code>、<code>defaultFallback</code> 等，用于指定资源被降级或熔断时的处理方法</p></li></ul><h3 id="_2-限流规则" tabindex="-1"><a class="header-anchor" href="#_2-限流规则" aria-hidden="true">#</a> 2. 限流规则</h3><ul><li><p>流控</p><ul><li>直接</li><li>关联</li></ul><figure><img src="`+s+'" alt="image-20240414164111402" tabindex="0" loading="lazy"><figcaption>image-20240414164111402</figcaption></figure></li><li><p>熔断</p><figure><img src="'+e+`" alt="image-20240414164202806" tabindex="0" loading="lazy"><figcaption>image-20240414164202806</figcaption></figure></li><li><p>热点规则</p></li><li><p>授权规则</p></li></ul><h2 id="_12-seata" tabindex="-1"><a class="header-anchor" href="#_12-seata" aria-hidden="true">#</a> 12 . Seata</h2><h3 id="_1-使用-1" tabindex="-1"><a class="header-anchor" href="#_1-使用-1" aria-hidden="true">#</a> 1. 使用</h3><ul><li>@GlobalTransactional</li></ul><h3 id="_2-三大组件" tabindex="-1"><a class="header-anchor" href="#_2-三大组件" aria-hidden="true">#</a> 2. 三大组件</h3><ul><li><p>TC</p><ul><li>全局事务协调器，负责全局事务的协调和管理</li><li>Transaction Coordinator</li></ul></li><li><p>TM</p><ul><li>事务管理器，负责全局事务的发起、提交和回滚</li><li>Transaction Manager</li></ul></li><li><p>RM</p><ul><li>资源管理器，负责管理分支事务的生命周期</li><li>Resource Manager</li></ul></li><li><p>流程</p><ul><li>TM 开启分布式事务（TM 向 TC 注册全局事务记录）；</li><li>按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；</li><li>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；</li><li>TC 汇总事务信息，决定分布式事务是提交还是回滚；</li><li>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。</li></ul></li></ul><h3 id="_3-底层原理" tabindex="-1"><a class="header-anchor" href="#_3-底层原理" aria-hidden="true">#</a> 3. 底层原理</h3><p>Seata 提供了多种分布式事务模式，包括 AT（Automatic Transaction）、TCC（Try-Confirm-Cancel）、Saga 和 XA。以下是 Seata 在 AT 模式下解决分布式事务的基本原理：</p><p>Seata AT 模式的底层原理：</p><ol><li><strong>全局事务协调器（TC，Transaction Coordinator）</strong>： <ul><li>TC 组件负责维护全局事务的生命周期，包括开启事务、提交事务或回滚事务，并记录全局事务状态。</li></ul></li><li><strong>分支事务协调器（TM &amp; RM，Transaction Manager &amp; Resource Manager）</strong>： <ul><li>TM 是全局事务的发起者，通常嵌入在应用服务中，负责开启全局事务并将本地事务转换为全局事务。</li><li>RM 是资源管理器，每个数据库作为一个RM，Seata提供了RM代理，将其对接到数据库，负责单机事务的提交和回滚。</li></ul></li><li><strong>事务上下文和undo/redo日志</strong>： <ul><li>开启全局事务后，Seata 会在每个参与分布式事务的数据库实例上注册分支事务，并在执行SQL前保存原始数据到Undo Log（用于回滚）和在执行后保存已更新的数据到Redo Log（用于重做）。</li></ul></li><li><strong>事务提交与回滚</strong>： <ul><li>全局提交时，TC 通知所有RM提交分支事务，RM根据Redo Log提交更改。</li><li>若任何RM提交失败，则TC通知所有RM回滚，RM根据Undo Log还原事务执行前的状态。</li></ul></li><li><strong>一致性保障</strong>： <ul><li>通过两阶段提交（2PC）的过程，确保所有分支事务要么全部提交，要么全部回滚，以此来保证分布式事务的一致性。</li></ul></li></ol><p>流程概览：</p><ol><li><strong>开启全局事务</strong>：TM 向 TC 发起全局事务的开启请求，并获得全局事务ID（XID）。</li><li><strong>分支事务注册</strong>：在每个数据库操作之前，TM 将本地事务与全局事务关联，并将操作前的原始数据存入 Undo Log。</li><li><strong>执行本地事务</strong>：应用正常执行本地 SQL。</li><li><strong>分支事务报告</strong>：在本地事务提交前，TM 把分支事务的状态报告给 TC。</li><li><strong>全局提交/回滚决策</strong>：TC 根据所有分支事务的状态作出全局提交或回滚的决定，并通知所有RM执行相应的动作。</li></ol><p>通过这种方式，Seata AT模式能够在分布式环境下模拟出类似于传统数据库ACID特性的一致性事务行为。</p><h2 id="_13-nacos" tabindex="-1"><a class="header-anchor" href="#_13-nacos" aria-hidden="true">#</a> 13 . nacos</h2><h3 id="_1-nacos的心跳机制" tabindex="-1"><a class="header-anchor" href="#_1-nacos的心跳机制" aria-hidden="true">#</a> 1. nacos的心跳机制？</h3><ol><li><p><strong>客户端心跳</strong></p><ul><li>对于临时实例（租约模式），Nacos 使用客户端主动上报心跳的方式。每个服务实例在其启动后，通过集成的 Nacos 客户端 SDK 向 Nacos Server 发送心跳，通常是周期性的 HTTP 请求或者 TCP 协议的数据包。</li><li>心跳包通常包含服务实例的基本信息和当前状态，比如服务ID、IP地址、端口、权重等信息。</li><li>如果服务实例在指定的时间间隔内没有向 Nacos Server 报告心跳，则会被标记为不健康或下线，不再对外提供服务发现，从而防止客户端调用已失效的服务实例。</li></ul></li><li><p><strong>服务端探测</strong></p><ul><li>对于持久实例（非租约模式），Nacos 采用服务端主动探测的方式来进行健康检查。服务端会按照预设的时间间隔向服务实例发起探测请求，例如发送 HTTP GET 或者 TCP PING 请求。</li><li>如果服务实例能正确响应探测请求，那么认为该实例是健康的；如果连续多次探测失败，则服务端会认为该实例不健康，并从服务列表中剔除。</li></ul><p>nacos的心跳默认是5秒，即服务实例默认每隔5秒向nacos服务器发送一次心跳。默认超时时间可能是15秒或者30秒，那么如何通过配置文件修改呢</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">Spring</span> <span class="token class-name">Boot</span> 应用中的 application<span class="token punctuation">.</span>yml 或 application<span class="token punctuation">.</span>properties 文件
spring<span class="token operator">:</span>
  cloud<span class="token operator">:</span>
    nacos<span class="token operator">:</span>
      discovery<span class="token operator">:</span>
        # 设置服务实例心跳间隔
        heartbeat<span class="token operator">:</span>
          interval<span class="token operator">:</span> <span class="token number">5000</span> # 单位：毫秒，这里设置为<span class="token number">5</span>秒，可根据实际需要调整
          timeout<span class="token operator">:</span> <span class="token number">15000</span> # 单位：毫秒，这是心跳超时时间，超过这个时间未收到心跳，服务将被视为不健康

        # 根据某些版本或特定场景的配置项，可能会使用如下形式：
        # metadata<span class="token operator">:</span>
        #   preserved<span class="token punctuation">.</span>heart<span class="token punctuation">.</span>beat<span class="token punctuation">.</span>interval<span class="token operator">:</span> <span class="token number">5000</span> # 用于设置心跳间隔
        #   preserved<span class="token punctuation">.</span>heart<span class="token punctuation">.</span>beat<span class="token punctuation">.</span>timeout<span class="token operator">:</span> <span class="token number">15000</span> # 设置心跳超时时间

        # <span class="token class-name">Nacos</span> 服务注册中心地址
        server<span class="token operator">-</span>addr<span class="token operator">:</span> localhost<span class="token operator">:</span><span class="token number">8848</span>

注意：上述配置的具体键值可能会随着 <span class="token class-name">Nacos</span> 和 <span class="token class-name">Spring</span> <span class="token class-name">Cloud</span> <span class="token class-name">Alibaba</span> 版本的变化而变化，请根据所使用的 <span class="token class-name">Nacos</span> 客户端版本文档进行准确配置。

如果你不是使用 <span class="token class-name">Spring</span> <span class="token class-name">Cloud</span> 集成而是直接使用 <span class="token class-name">Nacos</span> 客户端 <span class="token constant">SDK</span>，则需要参考对应的 <span class="token constant">SDK</span> 文档来配置心跳间隔等参数，通常是在初始化客户端时通过 <span class="token constant">API</span> 进行设置。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-nacos服务注册发现的原理" tabindex="-1"><a class="header-anchor" href="#_2-nacos服务注册发现的原理" aria-hidden="true">#</a> 2. nacos服务注册发现的原理</h3><p>Nacos 作为阿里巴巴开源的一款集成了服务注册与发现、配置管理、动态DNS服务于一体的中间件，其底层实现服务注册和发现的过程主要包括以下几个关键步骤和技术要点：</p><ol><li><p><strong>服务注册</strong>：</p><ul><li>当服务实例启动时，通过集成Nacos SDK，服务实例会向Nacos Server发起注册请求，提交自身的服务ID、IP地址、端口、元数据等信息。</li><li>Nacos Server接收这些信息并存储在内部的数据结构中，通常是基于内存的高性能数据存储方案，以保证服务注册和查询的高效率。</li><li>Nacos Server还支持持久化到磁盘或数据库（如MySQL），以便在服务器重启或集群环境下保持服务实例列表的一致性。</li></ul></li><li><p><strong>服务心跳</strong>：</p><ul><li>注册成功后，服务实例会维持一个心跳机制，定期向Nacos Server发送心跳，表明自己的存活状态。</li><li>若Nacos Server在指定时间内未收到服务实例的心跳，则认为该实例已下线，并从服务列表中移除。</li></ul></li><li><p><strong>服务发现</strong>：</p><ul><li>当客户端（消费者）需要调用服务时，它会通过Nacos SDK向Nacos Server发起服务发现请求，请求指定服务名下的可用服务实例列表。</li><li>Nacos Server根据服务名查找对应的服务实例集合，筛选出健康在线的服务实例，并将这些信息返回给客户端。</li><li>如果配置了健康检查和负载均衡策略，Nacos还会根据策略进一步过滤和排序服务实例列表。</li></ul></li><li><p><strong>健康检查</strong>：</p><ul><li>Nacos支持主动健康检查，通过健康检查插件可以检测服务实例的实际健康状况，例如通过TCP、HTTP等方式验证服务是否可用。</li></ul></li><li><p><strong>数据同步</strong>：</p><ul><li>在集群部署模式下，Nacos Server之间的数据同步采用Raft一致性算法保证数据的强一致性，从而确保各个节点上的服务注册信息和服务发现结果是一致的。</li></ul></li><li><p><strong>DNS服务</strong>：</p><ul><li>另外，Nacos还提供了DNS服务发现模式，客户端可以直接通过DNS协议获取服务实例的IP地址和端口，无需直接调用Nacos API，简化了服务发现过程。</li></ul></li></ol><p>总的来说，Nacos通过一套高效可靠的消息通信机制、数据存储与同步策略以及服务健康监测机制，实现了微服务架构中的服务注册与发现的核心功能。</p><h3 id="_3-nacos动态刷新底层实现" tabindex="-1"><a class="header-anchor" href="#_3-nacos动态刷新底层实现" aria-hidden="true">#</a> 3. nacos动态刷新底层实现</h3><p><code>@RefreshScope</code> 是 Spring Cloud 体系中用来实现实时刷新配置的一种注解，特别在结合 Nacos 作为配置中心时，能够使得应用在无需重启的情况下，动态更新从 Nacos 中获取的配置。</p><p><strong>@RefreshScope 工作原理概览：</strong></p><ol><li><p><strong>注入 Bean 时的代理机制：</strong></p><ul><li>当一个类或者方法被标记为 <code>@RefreshScope</code> 注解时，Spring 容器不会直接实例化该 Bean，而是通过 CGLIB 或 JDK 动态代理创建一个代理对象。</li><li>当其他组件依赖这个 Bean 时，实际上是依赖于这个代理对象。</li></ul></li><li><p><strong>监听配置变化：</strong></p><ul><li>Nacos 客户端（如 <code>NacosConfigService</code>）会周期性地或通过长轮询方式从 Nacos 服务器拉取配置信息，检测是否有变更。</li><li>当配置发生变更时，Nacos 客户端会接收到通知。</li></ul></li><li><p><strong>触发刷新：</strong></p><ul><li>配置变化后，Nacos 客户端会通过某种机制（例如发布一个 <code>RefreshEvent</code> 事件到 Spring Cloud 的事件广播系统）通知到所有带有 <code>@RefreshScope</code> 的 Bean。</li><li>在 Spring Cloud 生态中，有一个 <code>RefreshScope</code> 类，它实现了 ApplicationListener 接口，因此它可以监听到 <code>RefreshScopeRefreshedEvent</code> 或 <code>RefreshEvent</code>，并在接收到这些事件时，重新加载并刷新代理对象中的配置属性值。</li></ul></li><li><p><strong>属性注入更新：</strong></p><ul><li>对于那些通过 <code>@Value</code> 注解从配置中心读取的属性，一旦配置刷新，相应的 Bean 属性值也会随之更新。</li></ul></li><li><p><strong>主动刷新接口：</strong></p><ul><li>除了被动监听配置变化外，也可以通过访问 <code>/refresh</code> 端点主动触发整个应用程序范围内的配置刷新。</li></ul></li></ol><p>总结来说，<code>@RefreshScope</code> 的作用是配合配置中心（如 Nacos）实现配置的热更新，确保应用在运行时能响应外部配置的变化，从而增强了微服务架构下的灵活性和可运维性。</p><h2 id="_14-xxl-job" tabindex="-1"><a class="header-anchor" href="#_14-xxl-job" aria-hidden="true">#</a> 14. xxl-job</h2><h3 id="_1-xxl-job-和elastic-job的区别" tabindex="-1"><a class="header-anchor" href="#_1-xxl-job-和elastic-job的区别" aria-hidden="true">#</a> 1.xxl-job 和elastic-job的区别</h3><p>xxl-job 和 elastic-job 都是用于解决分布式环境下的定时任务调度问题，但它们的设计理念和适用场景有所不同：</p><p><strong>xxl-job</strong>：</p><ul><li>出自大众点评，后来由阿里云继续维护和开发。</li><li>它是一个分布式的任务调度框架，采用中心化的设计，调度中心通过数据库锁来保证集群分布式调度的一致性。</li><li>易于管理和监控，提供友好的Web界面，支持任务失败后的报警功能。</li><li>依赖MySQL数据库作为持久化存储，不依赖Zookeeper等分布式协调服务。</li><li>优势在于其简洁易用，对于中小规模的分布式任务调度场景非常适合。</li></ul><p><strong>elastic-job</strong>：</p><ul><li>原先是由当当网开发，现在属于Apache ShardingSphere生态的一部分。</li><li>分为Elastic-Job-Lite和Elastic-Job-Cloud两种模式，分别对应轻量级和云原生的解决方案。</li><li>Elastic-Job-Lite是去中心化的解决方案，无需中心节点，基于Zookeeper实现分布式协调。</li><li>强调弹性和可扩展性，支持任务分片和作业失败的转移执行，提供丰富的容错策略。</li><li>对于大规模分布式任务调度，尤其是需要高性能和高度弹性的场景，Elastic-Job的功能更加全面和强大。</li></ul><p>选择哪一个更好主要取决于您的实际需求：</p><ul><li>如果你的任务调度需求比较简单，部署规模较小，对运维界面友好度和易于入门有较高要求，那么xxl-job可能是更好的选择。</li><li>如果你需要处理大量分布式任务，强调任务的弹性分配、高可用性和强大的容错机制，且愿意接受更高的学习成本，那么Elastic-Job可能更适合。</li></ul><p>总的来说，两者都是优秀的产品，关键在于评估自身项目的技术栈、任务规模、扩展性需求以及团队对相关技术的熟悉程度等因素，从而做出合适的选择。</p><h3 id="_2-xxl-job是如何保证分布式下只有一个任务执行的-原理是什么" tabindex="-1"><a class="header-anchor" href="#_2-xxl-job是如何保证分布式下只有一个任务执行的-原理是什么" aria-hidden="true">#</a> 2. xxl-job是如何保证分布式下只有一个任务执行的，原理是什么？</h3><p>XXL-JOB 为了保证分布式环境下同一个任务只有一个执行器执行，采用了中心化调度和分布式锁机制来防止任务重复执行。具体原理如下：</p><ol><li><p><strong>中心化调度</strong>：</p><ul><li>XXL-JOB 设计了一个调度中心（xxl-job-admin），所有的任务调度指令都由调度中心统一发出。</li><li>所有执行器（xxl-job-executor）会向调度中心注册自己及其所能执行的任务列表。</li><li>当调度中心根据CRON表达式计算出某个任务应该被执行时，它会选择一个执行器（通常是轮询或基于权重选择）来执行该任务。</li></ul></li><li><p><strong>分布式锁</strong>：</p><ul><li>调度中心在数据库中存储任务调度的相关信息，其中包括任务的执行状态、下次执行时间等。</li><li>在确定执行任务的执行器时，调度中心会使用数据库锁（如悲观锁或者乐观锁）来确保同一时刻只有一个执行器获得执行任务的权利。</li><li>当一个执行器领取到任务准备执行时，会在数据库中标记任务为锁定状态，其他执行器此时尝试领取同一任务时就会发现任务已被锁定，从而避免了重复执行。</li></ul></li><li><p><strong>任务唯一标识与执行记录</strong>：</p><ul><li>每个任务都有唯一的标识符，执行器在执行任务前会检查任务是否已经被执行或正在执行，这是通过查询数据库中任务调度记录表实现的。</li><li>如果发现任务正在执行或已完成，则不会再执行该任务。</li></ul></li><li><p><strong>数据库原子操作</strong>：</p><ul><li>在任务调度过程中，调度中心通过数据库事务来保证任务分配和执行状态更新的原子性，确保无论何时只有一个执行器成功领到任务并执行。</li></ul></li></ol><p>总结来说，XXL-JOB通过中心化的调度策略结合数据库的原子操作和分布式锁机制，有效防止了分布式环境下任务的并发执行问题，确保了任务的幂等性。</p><h2 id="_15-skywalking-底层是如何实现分布式链路追踪的" tabindex="-1"><a class="header-anchor" href="#_15-skywalking-底层是如何实现分布式链路追踪的" aria-hidden="true">#</a> 15. skywalking 底层是如何实现分布式链路追踪的</h2><h3 id="_1-skywalking-底层是如何实现分布式链路追踪的" tabindex="-1"><a class="header-anchor" href="#_1-skywalking-底层是如何实现分布式链路追踪的" aria-hidden="true">#</a> 1. skywalking 底层是如何实现分布式链路追踪的</h3><p>Apache SkyWalking 是一个开源的可观测性平台，用于分布式系统的链路追踪、性能监控和诊断。其底层实现分布式链路追踪的核心原理主要包括以下几个方面：</p><ol><li><p><strong>探针(Agent)</strong>：</p><ul><li>SkyWalking 使用探针（Agent）植入到各个服务的进程中，这些探针通常是以Javaagent的形式存在，也可以是语言特定的SDK。探针的主要作用是在服务的方法调用前后插入追踪点，记录span（基本追踪单元）数据，包括请求的开始时间、结束时间、跨度、操作类型、调用关系、以及相关的元数据（如HTTP请求头、响应码、错误信息等）。</li></ul></li><li><p><strong>Span与Trace概念</strong>：</p><ul><li>在SkyWalking中，一个完整的调用链路称为一个Trace，Trace由一系列的Span组成，每个Span代表一次服务间的调用或一次服务内部的操作。</li><li>Span包含了操作的详细信息，例如服务名称、操作名、开始和结束时间戳、执行耗时等，并且每个Span都有一个全局唯一的Trace ID和Span ID，以及可选的Parent Span ID来标识调用层级和父子关系。</li></ul></li><li><p><strong>采样与上报</strong>：</p><ul><li>Agent会对服务产生的Spans进行采样，即根据配置的采样策略决定哪些Span需要被记录并上报给OAP服务器。采样策略既可以是全量记录，也可以是基于比例或条件触发的。</li><li>上报的数据通常经过高效的序列化之后，通过gRPC或者HTTP等方式发送给OAP服务器。</li></ul></li><li><p><strong>OAP服务(Observability Analysis Platform)</strong>：</p><ul><li>OAP服务器负责接收来自各服务探针的Span数据，将它们存储在一个集中的存储系统中，如Elasticsearch、H2、MySQL、TiDB等。</li><li>OAP还负责对收集的数据进行聚合、分析和索引，以便于后续查询和展示。</li></ul></li><li><p><strong>跟踪上下文传递</strong>：</p><ul><li>在分布式系统中，SkyWalking通过传递跟踪上下文（通常是通过ThreadLocal或者其他语言特性的上下文传播机制）来串联整个请求链路中的各个Span，确保跨进程、跨服务的调用能够形成完整的调用链。</li></ul></li><li><p><strong>可视化展示</strong>：</p><ul><li>最终，SkyWalking提供了一个UI界面，可以将收集到的分布式链路信息以拓扑图和调用链详情等形式展现出来，帮助开发者和运维人员直观理解系统间的调用关系、识别性能瓶颈和定位问题。</li></ul></li></ol><p>通过以上的方式，SkyWalking实现了跨越分布式系统各个服务和组件的链路追踪，使得复杂的微服务架构中的请求路径变得透明和可追溯。</p>`,116),p=[o];function r(c,u){return n(),l("div",null,p)}const k=a(t,[["render",r],["__file","springcloud.html.vue"]]);export{k as default};
