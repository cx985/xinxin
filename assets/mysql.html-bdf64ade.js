import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e as l}from"./app-57970fd2.js";const e="/assets/image-20240129101219200-1ca19a5a.png",i="/assets/image-20240421141844033-76de84cd.png",t="/assets/image-9f23e8c4.png",d={},r=l('<h1 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h1><h2 id="一-基础知识" tabindex="-1"><a class="header-anchor" href="#一-基础知识" aria-hidden="true">#</a> 一. 基础知识</h2><h3 id="_1-1-e-r图" tabindex="-1"><a class="header-anchor" href="#_1-1-e-r图" aria-hidden="true">#</a> 1.1 E-R图</h3><ul><li><p>全称：实体联系图，提供了表示实体类型、属性和联系的方法</p></li><li><p>主要有三个要素组成</p><ul><li>实体：用矩形框表示，通常是现场时间的业务对象。比如学生、课程、班级等实体</li><li>属性：用椭圆形表示，即某个实体拥有的属性</li><li>联系：用菱形表示，即实体与实体之间的关系</li></ul><figure><img src="'+e+`" alt="image-20240129101219200" tabindex="0" loading="lazy"><figcaption>image-20240129101219200</figcaption></figure></li></ul><h3 id="_1-2-数据库三大范式" tabindex="-1"><a class="header-anchor" href="#_1-2-数据库三大范式" aria-hidden="true">#</a> 1.2 数据库三大范式</h3><ul><li>第一范式 <ul><li>属性不可再分</li></ul></li><li>第二范式 <ul><li>第一范式基础上，消除了非主属性对于码的部分函数依赖</li><li>通俗理解：在满足1NF的基础上，2NF要求表必须有主键，并且表中的其他数据（非键字段）必须完全依赖于主键</li><li>举例：假如有个图书馆，假设我们记录每本书借出的时间，如果“书籍ID+借书日期”作为一个组合主键，那么其他信息，比如借书人的信息，就应该直接依赖于这个组合主键，而不是仅依赖其中的一部分（比如仅依赖书籍ID）</li></ul></li><li>第三范式 <ul><li>三范式在第二范式基础上，消除了非主属性对于码的传递函数依赖</li><li>通俗理解：在满足1NF和2NF的基础上，3NF要求数据中不存在非主键字段之间的依赖。这意味着所有的非键信息都只能依赖于键信息，不能相互依赖</li><li>举例：比方说，在一个记录了书籍和作者信息的表中，如果“作者国籍”实际上是和“作者名”相关联的，那么“作者国籍”就不应该直接出现在记录书籍的表中，因为这会导致与书籍直接相关的信息之外的冗余</li></ul></li></ul><h3 id="_1-3-drop、delete、truncate的区别" tabindex="-1"><a class="header-anchor" href="#_1-3-drop、delete、truncate的区别" aria-hidden="true">#</a> 1.3 drop、delete、truncate的区别</h3><ul><li>drop <ul><li>drop table 表名</li><li>直接将表都删掉</li></ul></li><li>delete <ul><li>delete from 表名 where 列名=值</li><li>删除表里面的数据</li></ul></li><li>truncation <ul><li>truncate table 表名</li><li>只删除表中的数据</li></ul></li></ul><h3 id="_1-4-having-和-where的区别" tabindex="-1"><a class="header-anchor" href="#_1-4-having-和-where的区别" aria-hidden="true">#</a> 1.4 having 和 where的区别</h3><ul><li>where: 过滤指定的行，后面不能加聚合函数，where在group by 前</li><li>having: 过滤分组，一般都是和group by 连用，不能单独使用。having在group by之后</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num
<span class="token keyword">from</span> customs
<span class="token keyword">where</span> cust_age <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> cust_name
<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-on-和-where的区别" tabindex="-1"><a class="header-anchor" href="#_1-5-on-和-where的区别" aria-hidden="true">#</a> 1.5 ON 和 WHERE的区别</h3><ul><li>连接表时，sql会根据连接条件生成一张新的临时表。on就是连接条件，它决定临时表的生成</li><li>where是在临时表生成后，再对临时表中的数据进行过滤，生成最终的结果集</li><li>总结 <ul><li>on是生成一张临时表，where是对临时表进行筛选</li></ul></li></ul><h3 id="_1-6-left-right-join" tabindex="-1"><a class="header-anchor" href="#_1-6-left-right-join" aria-hidden="true">#</a> 1.6 LEFT/RIGHT JOIN</h3><ul><li>left join .. on <ul><li>返回左表中的所有行，即使右表中没有满足条件的行也是如此</li></ul></li><li>right join ..on <ul><li>返回右表中的所有行，即使左表中没有满足条件的行也是如此</li></ul></li></ul><h2 id="二、mysql" tabindex="-1"><a class="header-anchor" href="#二、mysql" aria-hidden="true">#</a> 二、MYSQL</h2><p>mysql知识总结汇总</p><h2 id="_2-1-常见脚本创建" tabindex="-1"><a class="header-anchor" href="#_2-1-常见脚本创建" aria-hidden="true">#</a> 2.1. 常见脚本创建</h2><h3 id="_2-1-1-创建表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-创建表" aria-hidden="true">#</a> 2.1.1 创建表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token identifier"><span class="token punctuation">\`</span>test_table<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键id&#39;</span><span class="token punctuation">,</span>
  record_id <span class="token keyword">int</span>  <span class="token keyword">comment</span> <span class="token string">&#39;记录id&#39;</span><span class="token punctuation">,</span>
  create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  update_time <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  test_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;测试内容&#39;</span><span class="token punctuation">,</span> 
  jyaq <span class="token keyword">text</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">COMMENT</span> <span class="token string">&#39;简要案情&#39;</span><span class="token punctuation">,</span>

  <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">btree</span><span class="token punctuation">,</span>
  <span class="token keyword">key</span> idx_test_index <span class="token punctuation">(</span>test_name<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">btree</span>

<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">&#39;测试表表名称&#39;</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-更新表" tabindex="-1"><a class="header-anchor" href="#_2-1-2-更新表" aria-hidden="true">#</a> 2.1.2 更新表</h3><h3 id="_2-1-3-修改表字段-可以重复执行-线上环境推荐" tabindex="-1"><a class="header-anchor" href="#_2-1-3-修改表字段-可以重复执行-线上环境推荐" aria-hidden="true">#</a> 2.1.3 修改表字段(可以重复执行，线上环境推荐)</h3><ul><li>新增字段</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop procedure if exists add_field_test_table;
delimiter $$
create procedure add_field_test_table()
  begin
      if not exists (select 1 from information_schema.columns where table_schema=&#39;test&#39; and table_name = &#39;test_table&#39; and column_name = &#39;test_name2&#39;)
        then
        ALTER TABLE \`test_table\` add COLUMN \`test_name2\` varchar(255) DEFAULT NULL COMMENT &#39;测试内容2添加&#39;;
        end if ;
  end $$
delimiter ;
call add_field_test_table;
drop procedure if exists add_field_test_table;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改字段</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop procedure if exists modify_field_test_table;
delimiter $$
create procedure modify_field_test_table()
  begin
      if exists (select 1 from information_schema.columns where table_schema=&#39;test&#39; and table_name = &#39;test_table&#39; and column_name = &#39;test_name2&#39;)
        then
        ALTER TABLE \`test_table\` modify COLUMN \`test_name2\` varchar(50) DEFAULT NULL COMMENT &#39;测试内容2修改&#39;;
        end if ;
  end $$
delimiter ;
call modify_field_test_table;
drop procedure if exists modify_field_test_table;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-4-添加列" tabindex="-1"><a class="header-anchor" href="#_2-1-4-添加列" aria-hidden="true">#</a> 2.1.4 添加列</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">add</span> age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-5-修改列" tabindex="-1"><a class="header-anchor" href="#_2-1-5-修改列" aria-hidden="true">#</a> 2.1.5 修改列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>alter table user modify column age tinyint<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-5-删除列" tabindex="-1"><a class="header-anchor" href="#_2-1-5-删除列" aria-hidden="true">#</a> 2.1.5 删除列</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>alter table user drop column age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-6-创建索引" tabindex="-1"><a class="header-anchor" href="#_2-1-6-创建索引" aria-hidden="true">#</a> 2.1.6 创建索引</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> user_index <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-7-添加索引" tabindex="-1"><a class="header-anchor" href="#_2-1-7-添加索引" aria-hidden="true">#</a> 2.1.7 添加索引</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>alter table user add index <span class="token function">user_index</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-8-创建唯一索引" tabindex="-1"><a class="header-anchor" href="#_2-1-8-创建唯一索引" aria-hidden="true">#</a> 2.1.8 创建唯一索引</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>create unique index user_index on <span class="token function">user</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-9-删除索引" tabindex="-1"><a class="header-anchor" href="#_2-1-9-删除索引" aria-hidden="true">#</a> 2.1.9 删除索引</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>alter table user drop index user_index<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-2-mysql字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-mysql字符集" aria-hidden="true">#</a> 2.2 mysql字符集</h2><h3 id="_2-2-1-字符集" tabindex="-1"><a class="header-anchor" href="#_2-2-1-字符集" aria-hidden="true">#</a> 2.2.1 字符集</h3><ul><li>创建统一使用utf8mb4字符集</li></ul><h2 id="_2-3-mysql基础" tabindex="-1"><a class="header-anchor" href="#_2-3-mysql基础" aria-hidden="true">#</a> 2.3 mysql基础</h2><h3 id="_1-null-和-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_1-null-和-的区别是什么" aria-hidden="true">#</a> 1. NULL 和 ‘’的区别是什么？</h3><ul><li>NULL 代表一个不确定的之，就算是两个NULL,它两也不一定相等</li><li>‘’的长度是0，是不占用空间的，而NULL是需要占用空间的</li><li>NULL会影响聚合函数的结果</li><li>查询NULL值时，必须使用is null 或is not null来判断</li></ul><h3 id="_2-myisam-和innodb有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-myisam-和innodb有什么区别" aria-hidden="true">#</a> 2. MyISAM 和InnoDB有什么区别？</h3><ol><li>是否支撑行级锁</li><li>是否支持事务</li><li>是否支持外键</li><li>是否支持mvcc</li></ol><p>总结：innodb都支持，myisam都不支持</p><h2 id="_2-4-mysql事务-重要" tabindex="-1"><a class="header-anchor" href="#_2-4-mysql事务-重要" aria-hidden="true">#</a> 2.4 mysql事务(重要)</h2><h3 id="_1-事务的特性" tabindex="-1"><a class="header-anchor" href="#_1-事务的特性" aria-hidden="true">#</a> 1. 事务的特性</h3><ul><li>原子性 <ul><li>事物是最小的执行单位，不允许分割</li></ul></li><li>隔离性 <ul><li>并发访问数据库时候，一个用户的事物不被其他事物所干扰，各并发事物之间数据库是独立的</li></ul></li><li>持久性 <ul><li>一个事物被提交之后，它对数据库中数据的改变是持久的</li></ul></li><li>一致性 <ul><li>执行事务前后，数据保持一致</li></ul></li></ul><h3 id="_2-并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#_2-并发事务带来的问题" aria-hidden="true">#</a> 2. 并发事务带来的问题</h3><h4 id="_1-脏读" tabindex="-1"><a class="header-anchor" href="#_1-脏读" aria-hidden="true">#</a> 1. 脏读</h4><ul><li>一个事务读取到了另外一个数据修改还未提交的数据</li></ul><h4 id="_2-丢失修改" tabindex="-1"><a class="header-anchor" href="#_2-丢失修改" aria-hidden="true">#</a> 2. 丢失修改</h4><ul><li>两个事务同时读取一个数据，第一个事务修改了这个数据后，第二个数据也修改了这个数据，这样第一个事务内的修改结果被丢失</li></ul><h4 id="_3-不可重复读" tabindex="-1"><a class="header-anchor" href="#_3-不可重复读" aria-hidden="true">#</a> 3. 不可重复读</h4><ul><li>一个事务内多次读取同一数据，在这个事务还没结束时，另外一个事务也访问该数据，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。发生了在一个事务内两次读到的数据是不一样的情况</li></ul><h4 id="_4-幻读" tabindex="-1"><a class="header-anchor" href="#_4-幻读" aria-hidden="true">#</a> 4. 幻读</h4><ul><li>一个事务读取了几行数据，接着另外一个并发事务插入了一些数据，在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，像发生了幻觉一样</li></ul><h4 id="_5-不可重复读和幻读的区别" tabindex="-1"><a class="header-anchor" href="#_5-不可重复读和幻读的区别" aria-hidden="true">#</a> 5. 不可重复读和幻读的区别？</h4><ul><li>不可重复读的重点是内容修改或者记录减少</li><li>幻读重点在新增</li></ul><h3 id="_3-如何解决并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#_3-如何解决并发事务带来的问题" aria-hidden="true">#</a> 3. 如何解决并发事务带来的问题</h3><h4 id="_1-加锁" tabindex="-1"><a class="header-anchor" href="#_1-加锁" aria-hidden="true">#</a> 1. 加锁</h4><ul><li>mysql中主要是通过读写锁来实现并发控制</li><li>共享锁 <ul><li>又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取</li></ul></li><li>排他锁 <ul><li>又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取，如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁</li></ul></li><li>表级锁</li><li>行级锁 <ul><li>仅对相关的记录上锁</li></ul></li></ul><h4 id="_2-mvcc" tabindex="-1"><a class="header-anchor" href="#_2-mvcc" aria-hidden="true">#</a> 2. MVCC</h4><ul><li>多版本并发控制的方法，即对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。</li><li>通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的</li><li>所依赖的手段主要是 <ul><li>隐藏字段 <ul><li>用来判断当前版本数据的可见性</li></ul></li><li>read view <ul><li>用来判断当前版本数据的可见性</li></ul></li><li>undo log <ul><li>用于记录某行数据的多个版本的数据</li></ul></li></ul></li></ul><h3 id="_4-sql标准定义了哪些事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_4-sql标准定义了哪些事务隔离级别" aria-hidden="true">#</a> 4. sql标准定义了哪些事务隔离级别</h3><h4 id="_1-读未提交" tabindex="-1"><a class="header-anchor" href="#_1-读未提交" aria-hidden="true">#</a> 1. 读未提交</h4><ul><li>READ-UNCOMMITTED</li><li>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读、不可重复读</li></ul><h4 id="_2-读已提交" tabindex="-1"><a class="header-anchor" href="#_2-读已提交" aria-hidden="true">#</a> 2. 读已提交</h4><ul><li>READ-COMMITTED</li><li>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</li></ul><h4 id="_3-可重复读-rr" tabindex="-1"><a class="header-anchor" href="#_3-可重复读-rr" aria-hidden="true">#</a> 3.可重复读（RR）</h4><ul><li>REPEATABLE-READ</li><li>对同一个字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</li></ul><h4 id="_4-可串行化" tabindex="-1"><a class="header-anchor" href="#_4-可串行化" aria-hidden="true">#</a> 4. 可串行化</h4><ul><li>SERIALIZABLE</li><li>最高的隔离级别，完全服从ACID的隔离级别，所有的事物依次逐个执行，这样事物之间就完全不可能产生干扰，该级别可以防止脏读，不可重复读和幻读</li></ul><h4 id="_5-mysql默认隔离级别" tabindex="-1"><a class="header-anchor" href="#_5-mysql默认隔离级别" aria-hidden="true">#</a> 5. mysql默认隔离级别</h4><ul><li><p>可重复读</p></li><li><p>命令</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql8 以下
<span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span>

mysql8 以上
<span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2-5-mysql锁" tabindex="-1"><a class="header-anchor" href="#_2-5-mysql锁" aria-hidden="true">#</a> 2.5. mysql锁</h2><h3 id="_1-表级锁" tabindex="-1"><a class="header-anchor" href="#_1-表级锁" aria-hidden="true">#</a> 1. 表级锁</h3><ul><li>对整张表加锁</li></ul><h3 id="_2-行级锁" tabindex="-1"><a class="header-anchor" href="#_2-行级锁" aria-hidden="true">#</a> 2. 行级锁</h3><ul><li>针对索引字段加的锁，只针对当前操作的行记录进行加锁</li><li>注意事项 <ul><li>在执行update、delete语句时，如果where条件中字段没有命中唯一索引或索引失效的话，就会导致全部扫描</li></ul></li><li>行锁分类 <ul><li>记录锁 <ul><li>Record Lock</li><li>属于单个行记录上的锁</li></ul></li><li>间隙锁 <ul><li>Gap Lock</li><li>锁定一个范围，不包括记录本身</li></ul></li><li>临键锁 <ul><li>Next-Key Lock</li><li>Record Lock + Gap Lock, 锁定一个范围，包含记录本身，主要为了解决幻读</li></ul></li></ul></li><li>可重复读隔离级别下，默认的行锁？ <ul><li>默认使用临键锁，如果操作的索引是唯一索引或主键，会对临键锁进行优化，降级为记录锁</li></ul></li></ul><h3 id="_3-共享锁" tabindex="-1"><a class="header-anchor" href="#_3-共享锁" aria-hidden="true">#</a> 3 .共享锁</h3><ul><li>读锁，允许多个事务同时获取</li></ul><h3 id="_4-排他锁" tabindex="-1"><a class="header-anchor" href="#_4-排他锁" aria-hidden="true">#</a> 4. 排他锁</h3><ul><li>写锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取</li></ul><h3 id="_5-当前读和快照读的区别" tabindex="-1"><a class="header-anchor" href="#_5-当前读和快照读的区别" aria-hidden="true">#</a> 5. 当前读和快照读的区别？</h3><ul><li><p>快照读</p><ul><li>一致性非锁定读，就是单纯的select语句</li><li>快照即记录的历史版本，每行记录可能存在多个历史版本</li><li>快照读情况下，如果读取的记录正在执行update/delete操作，读取操作不会因此去等待记录上X锁的释放，而是会去读取行的一个快照</li></ul></li><li><p>当前读</p><ul><li><p>就是给行记录加X锁或S锁</p></li><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 对读的记录加一个X锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span>

<span class="token comment"># 对读的记录加一个S锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_6-哪些操作会加表级锁-哪些操作会加行级锁" tabindex="-1"><a class="header-anchor" href="#_6-哪些操作会加表级锁-哪些操作会加行级锁" aria-hidden="true">#</a> 6. 哪些操作会加表级锁，哪些操作会加行级锁</h3><p>INNODB存储引擎下</p><ul><li>表级锁 <ul><li>altert table， drop table 等ddl操作会隐式地对表加表级锁</li></ul></li><li>行级锁 <ul><li>默认情况下，dml操作（insert,update,delete) 进行行级锁定</li><li>在查询时，通过select...for update可以显式获取行级锁</li></ul></li></ul><h2 id="_2-6-mysql索引" tabindex="-1"><a class="header-anchor" href="#_2-6-mysql索引" aria-hidden="true">#</a> 2.6 mysql索引</h2><h3 id="_1-索引介绍" tabindex="-1"><a class="header-anchor" href="#_1-索引介绍" aria-hidden="true">#</a> 1. 索引介绍</h3><ul><li>索引是一种用于快速查询和检索数据的数据结构</li><li>其本质可以看成是一种排序好的数据结构</li></ul><h3 id="_2-索引的优缺点" tabindex="-1"><a class="header-anchor" href="#_2-索引的优缺点" aria-hidden="true">#</a> 2. 索引的优缺点</h3><ul><li>优点 <ul><li>大大加快数据的检索速度</li><li>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性</li></ul></li><li>缺点 <ul><li>创建索引和维护索引需要耗费许多时间</li><li>索引需要使用物理文件存储，也会耗费一定空间</li></ul></li><li>索引一定能提高查询性能吗？ <ul><li>大多数情况下，索引查询都会比全表扫描要快的，但是如果数据库的数据量不大，使用索引也不一定能够带来很大提升</li></ul></li></ul><h3 id="_3-索引类型总结" tabindex="-1"><a class="header-anchor" href="#_3-索引类型总结" aria-hidden="true">#</a> 3. 索引类型总结</h3><ul><li><p>Mysql默认索引结构为B+ Tree</p><ul><li>为啥要使用b+ tree <ul><li>二叉树 <ul><li>如果是递增的，会导致右边越来越多，变成了链表，不合适</li></ul></li><li>平衡二叉树 <ul><li>要求左右子树的树高差绝对值不能超过1，如果数据太多，树的高度就会越来越高</li></ul></li><li>Hash表 <ul><li>哈希索引只支持等值查询（即给定一个确切的键值），对于范围查询则无效，因为它不具备顺序性</li><li>哈希索引没有顺序性，无法进行高效扫描</li><li>对于哈希索引，每当插入或删除数据时，可能导致哈希桶重新分配，成本较高</li></ul></li><li>B-Tree B树 <ul><li>多路平衡查找树，可以有多个子节点，每个节点可以存储多个值，解决了上面两种树的缺点，但是不适合区间查找</li><li>为啥B树不适合区间查找？ <ul><li>因为数据分布在整个树的各个层级，查询过程更复杂</li></ul></li></ul></li><li>B+Tree <ul><li>只有叶子节点才存储数据，非叶子节点只存储索引</li><li>B+Tree叶子节点使用了双向链表链接，并且使用从小到大排列，范围查找效率高，只需扫描一遍叶子节点即可</li><li>由于非叶子节点没有存放数据，因此B+树比B树更矮更胖，减少了磁盘IO次数</li></ul></li></ul></li></ul></li><li><p>聚簇索引</p><ul><li>索引结构和数据一起存放的索引，InnoDB中的主键索引就属于聚簇索引</li><li>.idb文件就包含了该表的索引和数据</li><li>优点 <ul><li>查询速度非常快,定位到索引的节点，就定位到了数据</li><li>对排序查找和范围查找优化</li></ul></li><li>缺点 <ul><li>依赖于有序的数据</li><li>更新代价大</li></ul></li></ul></li><li><p>非聚簇索引</p><ul><li>索引结构和数据分开存放的索引，二级索引就数据非聚簇索引</li><li>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点存放的是主键，根据主键再回表查数据</li><li>优点 <ul><li>更新代价比聚簇索引要小</li></ul></li><li>缺点 <ul><li>依赖于有序的数据</li><li>可能会二次查询(回表)：这应该是非聚簇索引的最大缺点了，当查到索引对应的指针或主键后，可能还会根据指针或主键再到数据文件或表中查询</li></ul></li><li>非聚簇索引一定回表查询吗？ <ul><li>不一定回表查询</li></ul></li></ul></li><li><p>覆盖索引</p><ul><li>如果一个索引包含(或者说覆盖)所有需要查询的字段的值，我们就称之为覆盖索引</li><li>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询</li><li>在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值，最终还是要回表，也就是通过主键再查找一次，这样就会比较慢，而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作</li></ul></li><li><p>联合索引</p><ul><li>使用表中的多个字段创建索引，就是联合索引，也叫组合索引或复合索引</li></ul></li><li><p>主键索引</p><ul><li><p>特殊的唯一索引，主键索引字段的所有值都是唯一的，一张表只能有一个</p></li><li><p>主键索引不能为NULL</p></li><li><p>结构就是聚簇索引</p></li><li><p>基于主键索引查询一定不需要回表</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER TABLE table_name
ADD PRIMARY KEY (column_name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>唯一索引</p><ul><li><p>一张表可以创建多个</p></li><li><p>可以为空</p></li><li><p>通常是非聚簇索引</p></li><li><p>需要回表</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER TABLE table_name
ADD UNIQUE KEY (column1, column2);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_4-最左前缀匹配原则" tabindex="-1"><a class="header-anchor" href="#_4-最左前缀匹配原则" aria-hidden="true">#</a> 4 . 最左前缀匹配原则</h3><ul><li><p>指的是查询从索引的最左前列开始并且不跳过索引中的列</p></li><li><p>主要是where后面的条件优化</p><ul><li>假设建立索引A,B,C; <ul><li>where a = value 会利用索引</li><li>where b = value 不会利用索引</li></ul></li></ul></li><li><p>口诀</p><ul><li><p>1.从最左开始，建立索引的第一个字段不能丢失，不然索引会失效哦，简称带头大哥不能死</p></li><li><p>中间兄弟不能断</p></li></ul></li><li><p>正确使用索引的一些建议</p><ul><li>不为NULL的字段：索引字段的数据应该尽量不为NULL</li><li>被频繁查询的字段：创建索引的字段应该是查询操作非常频繁的字段</li><li>被作为条件查询的字段：被作为where条件查询的字段，应该被考虑建立索引</li><li>频繁需要排序的字段可以建立索引</li><li>被经常频繁用于连接的字段可以使用索引</li><li>尽可能的考虑建立联合索引而不是单列索引</li><li>避免索引失效 <ul><li>创建了组合索引，但查询条件未遵守最左匹配原则</li><li>在索引列上进行计算、函数、类型转换</li><li>以%开头的LIKE查询</li><li>in的取值范围较大时会导致索引失效</li></ul></li></ul></li></ul><h3 id="_5-为啥不对表中所有的列创建索引" tabindex="-1"><a class="header-anchor" href="#_5-为啥不对表中所有的列创建索引" aria-hidden="true">#</a> 5. 为啥不对表中所有的列创建索引？</h3><pre><code>1. 存储空间占用
1. 写操作性能下降
</code></pre><h2 id="_2-7-explain" tabindex="-1"><a class="header-anchor" href="#_2-7-explain" aria-hidden="true">#</a> 2.7. explain</h2><ul><li><p>explain</p><ul><li>获取执行计划相关信息</li></ul></li><li><p>用法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token operator">+</span> <span class="token keyword">select</span> 查询语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>举例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> dept_emp <span class="token keyword">WHERE</span> emp_no <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> emp_no <span class="token keyword">FROM</span> dept_emp <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> emp_no <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>emp_no<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+-------------+----------+------------+-------+-----------------+---------+---------+------+--------+----------+-------------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>    <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys   <span class="token operator">|</span> <span class="token keyword">key</span>     <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span>   <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+----------+------------+-------+-----------------+---------+---------+------+--------+----------+-------------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span>     <span class="token operator">|</span> dept_emp <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">ALL</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>            <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">331143</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> SUBQUERY    <span class="token operator">|</span> dept_emp <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> <span class="token keyword">index</span> <span class="token operator">|</span> <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>dept_no <span class="token operator">|</span> <span class="token keyword">PRIMARY</span> <span class="token operator">|</span> <span class="token number">16</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">331143</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">index</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+-------------+----------+------------+-------+-----------------+---------+---------+------+--------+----------+-------------+</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>解释</p><ul><li>id : select 查询的序列标识符 <ul><li>select 标识符，是查询中select 的序号，用来标识整个查询中select 语句的顺序</li><li>id如果相同，从上往下依次执行。id不同，id值越大，执行优先级越高，如果行引用其他行的并集结果， 则该值可以为NULL</li></ul></li><li>select_type : select 关键字对应的查询类型 <ul><li>主要区分普通查询、联合查询、子查询等复杂的查询，常见的值有 <ul><li>SIMPLE : 简单查询，不包含UNION 或者子查询</li><li>PRIMARY: 查询中如果包含子查询或其他部分，外层的select 将被标记为primary</li><li>SUBQUERY: 子查询中的第一个select</li><li>UNION: 在union中，union 之后出现的select</li><li>DERIVED: 在from中出现的子查询将被标记为derived</li><li>UNION RESULT : UNION 查询的结果</li></ul></li></ul></li><li>table : 用到的表名</li><li>partitions : 匹配的分区，对于未分区的表，值为NULL</li><li>type : 表的访问方法（重要） <ul><li>查询执行的类型，描述了查询是如何执行的，所有值的顺序从最优到最差排序为：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; range &gt; index &gt; all</li><li>system <ul><li>如果表使用的引擎对于表行数统计是精确的，且表中只有一行记录的情况下，访问方法是system ，是const的一种特例</li></ul></li><li>const <ul><li>表中最多只有一行匹配的记录，一次查询就可以找到</li></ul></li><li>eq_ref <ul><li>当联表查询时，前一张表的行在当前这张表中只有一行与之对应。是除了system与const之外最好的join方式，常用于使用主键或唯一索引的所有字段作为连表条件</li></ul></li><li>ref <ul><li>使用普通索引作为查询条件，查询结果可能找到多个符合条件的行</li></ul></li><li>range <ul><li>对索引列进行范围查询，执行计划中的key列表示哪个索引被使用了</li></ul></li><li>index <ul><li>查询遍历了整棵索引树，与ALL类似，只不过扫描的是索引，而索引一般在内存中，速度更快</li></ul></li><li>all <ul><li>全表扫描</li></ul></li></ul></li><li>possible_keys : 可能用到的索引 <ul><li>可能用到的索引，如果这一列为NULL,则表示没有可能用到的索引</li></ul></li><li>key : 实际用到的索引（重要） <ul><li>表示实际用到的所有。如果为NULL ,则表示未用到索引</li></ul></li><li>key_len : 所选索引的长度 <ul><li>表示mysql实际使用的索引的最大长度，当使用到联合索引时，有可能是多个列的长度和</li></ul></li><li>ref : 当使用索引等值查询时，与索引作比较的列或常量</li><li>rows : 预计要读取的行数</li><li>filtered : 按表条件过滤后，留存的记录数的百分比</li><li>Extra ：附加信息 （重要） <ul><li>Using filesort <ul><li>MySQL无法直接通过索引获取有序数据，而不得不在内存或磁盘上进行外部排序操作</li><li>优化点 <ul><li>添加合适索引</li><li>尽可能使用覆盖索引</li><li>调整MySQL的<code>sort_buffer_size</code>系统变量，适当增加排序缓冲区的大小</li></ul></li></ul></li><li>Using temporary <ul><li>mysql 需要创建临时表来存储查询的结果，常见于order by 和group by</li></ul></li><li>Using index <ul><li>表明查询使用了覆盖索引，不用回表，查询效率非常高</li></ul></li><li>Using index condition <ul><li>表示查询优化器选择使用了索引条件下推这个特性</li></ul></li><li>Using where <ul><li>表明查询使用了where 子句进行条件过滤，一般在没有使用到索引的时候会出现</li></ul></li><li>Using join buffer <ul><li>联表查询的方式，表示当被驱动表的没有使用索引的时候，mysql会先将驱动表读出来放到join buffer中，再遍历被驱动表进行查询</li></ul></li></ul></li></ul></li></ul><h2 id="_2-8-mvcc" tabindex="-1"><a class="header-anchor" href="#_2-8-mvcc" aria-hidden="true">#</a> 2.8 MVCC</h2><ul><li>数据库操作 <ul><li>读读并发（没有问题）</li><li>读写并发 （MVCC）</li><li>写写并发 （加锁）</li></ul></li><li>当前读和快照读 <ul><li>快照读 <ul><li>就是读取快照数据，像我们常用的普通select语句在不加锁情况下就是快照读</li></ul></li><li>当前读 <ul><li>就是读取最新数据，所有加锁的select,或者对数据进行增删改都会进行当前读</li></ul></li></ul></li><li><strong>快照读是mvcc实现的基础，而当前读是悲观锁实现的基础</strong><ul><li>快照读存储在哪里呢？ <ul><li>undolog</li></ul></li><li>在同一时刻，select要快照读的时候，要读取哪个快照呢？ <ul><li>隐藏字段 <ul><li>隐藏事务id</li><li>回滚指针</li></ul></li><li>形成快照链表</li></ul></li><li>那么具体应该读取哪个快照呢？ <ul><li>read view <ul><li>trx_ids: 系统当前未提交的事务id的列表</li><li>low_limit_id: 应该分配给下一个事务的id值</li><li>up_limit_id：未提交的事务中最小的事务id</li><li>creator_trx_id： 创建这个read view的事务id</li></ul></li><li>读取原则 <ul><li>事务id大的事务应该能看到事务id小的事务的变更结果</li><li>如果隐藏事务id小于未提交的事务中最小的事务id,证明在所有未提交是否创建之前，隐藏事务id已经创建了，因此这条记录对当前事务就应该是可见的</li><li>如果隐藏事务id大于应该分配给下一个事务的id值，不可见</li><li>如果隐藏事务id大于未提交的事务中最小的事务id并且小于未提交的事务中最小的事务id，会和trx_ids进行逐一比较</li></ul></li></ul></li></ul></li><li>多版本并发控制- Multi-Version Concurrency Control</li><li>用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性</li><li>InnoDB对MVCC的实现 <ul><li>隐藏字段 <ul><li>DB_TRX_ID(6字节)：表示最后一次插入或更新该行的事务id。</li><li>DB_ROLL_PTR(7字节)：回滚指针，指向该行的undo log。如果该行未被更新，则为空</li><li>DB_ROW_ID(6字节)：如果没有设置主键且该表没有唯一非空索引时，InnoDB会使用该id来生成聚簇索引</li></ul></li><li>Read View <ul><li>主要是用来做可见性判断，里面保持了当前对本事务不可见的其他活跃事务</li></ul></li><li>undo log <ul><li>作用 <ul><li>当事务回滚时用于将数据恢复到修改前的样子</li><li>另一个作用是mvcc, 当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过undo log读取之前的版本数据，以此实现非锁定读</li></ul></li></ul></li></ul></li></ul><h2 id="_2-9-什么是回表" tabindex="-1"><a class="header-anchor" href="#_2-9-什么是回表" aria-hidden="true">#</a> 2.9 什么是回表？</h2><p>当SQL查询仅依赖于非聚集索引（又称二级索引、辅助索引）时，如果查询所需要的数据不在该非聚集索引中完全包含，那么数据库需要借助索引中存储的主键值，回到聚集索引（主键索引）中查找对应的完整行记录。</p><p>具体来说，假设一个表有主键<code>id</code>和若干其他列如<code>name</code>、<code>age</code>等，若存在一个基于<code>name</code>的非聚集索引。当执行如下查询：</p><p>Sql</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token number">1</span>SELECT <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果数据库首先使用<code>name</code>的索引来定位到<code>name=&#39;John&#39;</code>的记录，但该索引只包含了<code>name</code>和对应的<code>id</code>值，并没有存储<code>age</code>等其他列的信息。为了得到完整的行数据，数据库就需要根据索引中查找到的主键<code>id</code>值，进一步回到聚集索引中去检索对应主键的行，这个过程就被形象地称为“回表”。</p><h2 id="_2-10-mysql三大日志" tabindex="-1"><a class="header-anchor" href="#_2-10-mysql三大日志" aria-hidden="true">#</a> 2.10 mysql三大日志</h2><ul><li>binlog <ul><li>物理日志，记录内容修改情况，只要发生表数据更新，都会产生binlog日志，保证了mysql集群架构的数据一致性</li></ul></li><li>redolog <ul><li>重做日志：拥有崩溃恢复能力</li></ul></li><li>undolog <ul><li>回滚日志保证事物的原子性</li></ul></li></ul><h2 id="_2-11-mysql主从复制原理" tabindex="-1"><a class="header-anchor" href="#_2-11-mysql主从复制原理" aria-hidden="true">#</a> 2.11 mysql主从复制原理</h2><p>MySQL的主从复制（Master-Slave Replication）是一种数据同步技术，它可以将主数据库（Master）的所有数据更改自动复制到一个或多个从数据库（Slave）上，从而实现数据的分布式存储和备份，以及读写分离等功能。主从复制的基本原理和配置步骤如下：</p><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><ol><li><strong>Binlog记录</strong>： <ul><li>主数据库开启二进制日志（Binary Log），记录所有的数据更改操作，包括INSERT、UPDATE、DELETE以及其他DDL语句。</li><li>格式分类 <ul><li>statement <ul><li>记录的就是sql语句的原文，也就是说在数据库中执行的sql会原封不动的记录到binlog中</li><li>会导致主从同步的数据不一致问题（如删除语句指定了limit而没有使用order by ，在主库和从库上的执行结构可能是不一样的）</li></ul></li><li>row <ul><li>会记录每个数据更改的具体行的细节，不会导致主从不一致问题</li><li>缺点：可能要记录更多的内容，比如批量修改，就需要把每条记录的变更都记录下来</li></ul></li><li>mixed <ul><li>statement + row结合，mysql会根据sql情况，自动在row和statement中互相切换选择一个他认为合适的格式进行记录</li></ul></li></ul></li></ul></li><li><strong>复制流程</strong>： <ul><li>从数据库通过I/O线程连接主数据库，请求并读取主数据库的二进制日志事件（binlog events）。</li><li>I/O线程将读取到的binlog events传输到从数据库的中继日志（Relay Log）中。</li><li>从数据库的SQL线程读取中继日志，并按顺序重新执行（重做）这些事件，从而在从数据库上产生与主数据库相同的数据更改。</li></ul></li></ol><h2 id="_2-12-mysql是如何实现事物的" tabindex="-1"><a class="header-anchor" href="#_2-12-mysql是如何实现事物的" aria-hidden="true">#</a> 2.12 mysql是如何实现事物的</h2><p>MySQL实现事务处理是通过底层数据库引擎的支持，特别是InnoDB存储引擎。InnoDB是MySQL中支持事务的标准引擎，它提供了ACID（Atomicity原子性、Consistency一致性、Isolation隔离性、Durability持久性）事务特性。以下是MySQL如何实现事务的简述：</p><ol><li><p><strong>原子性（Atomicity）</strong>：</p><ul><li>MySQL通过将一系列SQL语句封装在一个事务中来保证原子性。在一个事务内的所有操作要么全部成功提交，要么全部失败回滚，不会存在部分执行的现象。</li></ul></li><li><p><strong>一致性（Consistency）</strong>：</p><ul><li>通过约束（如外键约束、唯一约束等）和预写日志（Write-Ahead Log, WAL，即Redo Log）来维持数据库的一致性状态。在事务提交前，所有对数据的修改都会先写入Redo Log中，确保即使在系统崩溃的情况下也能恢复数据至一致状态。</li></ul></li><li><p><strong>隔离性（Isolation）</strong>：</p><ul><li>MySQL通过锁定机制和多版本并发控制（MVCC，Multiversion Concurrency Control）来实现事务的隔离性。</li><li>锁定机制：InnoDB支持行级锁，包括共享锁（读锁）和排他锁（写锁），以此来防止多个事务对同一资源的并发访问引发的问题。</li><li>MVCC：在可重复读（Repeatable Read）隔离级别下，InnoDB不锁定正在读取的数据，而是为事务提供一个快照视图，每个事务只能看到自己开始时刻的数据库状态，避免了脏读、不可重复读和幻读等问题。</li></ul></li><li><p><strong>持久性（Durability）</strong>：</p><ul><li>Redo Log（重做日志）和Undo Log（回滚日志）共同确保事务的持久性。</li><li>Redo Log记录了事务对数据库所做的修改，当事务提交时，Redo Log的内容会被刷入磁盘，即便发生宕机，也能通过Redo Log在系统重启时恢复未持久化的数据。</li><li>Undo Log保存了事务修改前的数据，用于在事务回滚时撤销对数据库的更改。</li></ul></li></ol><p>在实际操作中，用户通过<code>START TRANSACTION</code>、<code>COMMIT</code>和<code>ROLLBACK</code> SQL语句来手动控制事务的边界，而在自动提交模式下（默认模式），每条单独的SQL语句被视为一个隐式事务。在事务执行期间，MySQL会根据事务隔离级别采取相应的并发控制策略，以确保数据的正确性和完整性。</p><h2 id="_2-13-一条sql的执行过程" tabindex="-1"><a class="header-anchor" href="#_2-13-一条sql的执行过程" aria-hidden="true">#</a> 2.13 一条sql的执行过程？</h2><ul><li>连接器 <ul><li>管理链接，权限验证</li></ul></li><li>分析器 <ul><li>语法分析，生成解析树</li></ul></li><li>优化器 <ul><li>生成执行计划。根据索引看看是否可以优化</li></ul></li><li>执行器 <ul><li>执行sql语句</li></ul></li></ul><figure><img src="`+i+`" alt="image-20240421141844033" tabindex="0" loading="lazy"><figcaption>image-20240421141844033</figcaption></figure><h2 id="_2-14-sql调优优化" tabindex="-1"><a class="header-anchor" href="#_2-14-sql调优优化" aria-hidden="true">#</a> 2.14 sql调优优化</h2><ul><li>不分库分表 <ul><li>软优化 <ul><li>数据库参数调优 <ul><li>innodb_buffer_pool_size: 缓冲池大小，它控制着InnoDB存储引擎使用的内存大小。通常，可以将参数设置为系统可用内存的70%-80%</li><li>最大连接数</li><li>事物日志的大小：innodb_log_file_size</li></ul></li><li>分析慢查询sql语句，分析执行计划，进行sql改写和程序改写</li><li>优化数据库的索引结构</li><li>表结构优化 <ul><li>多表join <ul><li>数据冗余</li><li>宽表</li></ul></li></ul></li><li>引入nosql和程序架构调整</li></ul></li><li>硬优化 <ul><li>提升系统硬件（更快的io,更多的内存）；带宽、cpu、硬盘</li></ul></li></ul></li><li>分库分表 <ul><li>可以先看分表是否满足业务的需求和未来增长</li><li>如果分表不能满足，则考虑分库分表</li></ul></li></ul><h2 id="三、oracle" tabindex="-1"><a class="header-anchor" href="#三、oracle" aria-hidden="true">#</a> 三、ORACLE</h2><h2 id="_3-1-常见脚本创建" tabindex="-1"><a class="header-anchor" href="#_3-1-常见脚本创建" aria-hidden="true">#</a> 3.1. 常见脚本创建</h2><h3 id="_3-1-1-创建表" tabindex="-1"><a class="header-anchor" href="#_3-1-1-创建表" aria-hidden="true">#</a> 3.1.1 创建表</h3><ul><li>标准写法</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_table<span class="token punctuation">(</span>
  id varchar2<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
  name varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  birthdate <span class="token keyword">date</span><span class="token punctuation">,</span>
  is_active <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> test_table <span class="token operator">IS</span> <span class="token string">&#39;测试表名&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">COMMENT</span> <span class="token keyword">ON</span> <span class="token keyword">COLUMN</span> test_table<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token string">&#39;测试姓名&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>生产环境执行-推荐写法(需要在命令窗口执行)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  PROMPT test_table 创建表
  DECLARE
      FLAG_NUM NUMBER;
  BEGIN
      SELECT COUNT(*) INTO FLAG_NUM
      FROM USER_TABLES ATS
      WHERE ATS.TABLE_NAME = UPPER(&#39;test_table&#39;);
      IF FLAG_NUM = 0 THEN
          EXECUTE IMMEDIATE &#39;CREATE TABLE test_table(
                      id varchar2(255) primary key,
                      name varchar2(50),
                      birthdate date,
                      is_active char(1)
            )&#39;;
          -- ADD COMMENTS TO THE COLUMNS
          EXECUTE IMMEDIATE &#39;COMMENT ON TABLE test_table IS &#39;&#39;测试表名&#39;&#39;&#39;;
          EXECUTE IMMEDIATE &#39;COMMENT ON COLUMN test_table.name IS &#39;&#39;测试姓名&#39;&#39;&#39;;
      END IF;
  END;
  /
  COMMIT;


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure></li></ul><h3 id="_1-2-更新表" tabindex="-1"><a class="header-anchor" href="#_1-2-更新表" aria-hidden="true">#</a> 1.2 更新表</h3><ul><li><p>修改表字段varchar为clob<br> alter table test_table rename column name to name_clob;<br> alter table test_table add name clob;<br> update test_table set name=trim(name_clob);<br> alter table test_table drop column name_clob;<br> comment on column test_table.name is &#39;测试修改&#39;;</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>表后面新增字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> test_table
<span class="token keyword">add</span> <span class="token punctuation">(</span>sms_type number<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    bkry_id varchar2<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">comment</span>  <span class="token keyword">on</span>  <span class="token keyword">column</span>  test_table<span class="token punctuation">.</span>sms_type   <span class="token operator">is</span>  <span class="token string">&#39;短信类型&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">comment</span>  <span class="token keyword">on</span>  <span class="token keyword">column</span>  test_table<span class="token punctuation">.</span>bkry_id    <span class="token operator">is</span>  <span class="token string">&#39;布控人员id&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改表字段长度</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token keyword">alter</span> <span class="token keyword">table</span> test_table <span class="token keyword">modify</span> <span class="token punctuation">(</span>bkry_id varchar2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,137),o=[r];function p(c,u){return n(),s("div",null,o)}const m=a(d,[["render",p],["__file","mysql.html.vue"]]);export{m as default};
