import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as r}from"./app-57970fd2.js";const a="/assets/http-status-code-a7ed7150.png",s="/assets/image-20240123141214004-f2089683.png",n="/assets/image-20240123142630027-26c68efb.png",o={},e=r('<h1 id="计算机基础" tabindex="-1"><a class="header-anchor" href="#计算机基础" aria-hidden="true">#</a> 计算机基础</h1><h2 id="一、网络" tabindex="-1"><a class="header-anchor" href="#一、网络" aria-hidden="true">#</a> 一、网络</h2><h3 id="_1-osi-七层模型是什么" tabindex="-1"><a class="header-anchor" href="#_1-osi-七层模型是什么" aria-hidden="true">#</a> 1.OSI 七层模型是什么 ？</h3><ul><li>从高到低分别为 <ul><li>应用层：为计算机用户提供服务</li><li>表示层：数据处理（编解码、加密解密、压缩解压缩）</li><li>会话层：管理（建立、维护、重连）应用程序之间的会话</li><li>传输层：为两台主机进程之间的通信提供通用的数据传输服务</li><li>网络层：路由和寻址（决定数据在网络的游走路径）</li><li>数据链路层：侦编码和误差纠正控制</li><li>物理层：透明地传送比特流传输</li></ul></li><li>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去</li></ul><h3 id="_2-tcp-ip-四层模型是什么" tabindex="-1"><a class="header-anchor" href="#_2-tcp-ip-四层模型是什么" aria-hidden="true">#</a> 2. TCP/IP 四层模型是什么？</h3><ul><li>从高到低分别为 <ul><li><ol><li>应用层</li></ol></li><li><ol start="2"><li>传输层</li></ol></li><li><ol start="3"><li>网络层</li></ol></li><li><ol start="4"><li>网络接口层</li></ol></li></ul></li></ul><h3 id="_3-传输层常见的协议" tabindex="-1"><a class="header-anchor" href="#_3-传输层常见的协议" aria-hidden="true">#</a> 3. 传输层常见的协议</h3><ul><li>TCP <ul><li><strong>Transmission Control Protocol</strong></li><li><strong>传输控制协议</strong></li><li>提供 <strong>面向连接</strong> 的，<strong>可靠</strong> 的数据传输服务</li></ul></li><li>UDP <ul><li><strong>User Datagram Protocol</strong></li><li><strong>用户数据协议</strong></li><li>提供 <strong>无连接</strong> 的，<strong>尽最大努力</strong> 的数据传输服务（不保证数据传输的可靠性），简单高效</li></ul></li></ul><h3 id="_4-http-从输入-url-到页面展示到底发生了什么" tabindex="-1"><a class="header-anchor" href="#_4-http-从输入-url-到页面展示到底发生了什么" aria-hidden="true">#</a> 4. Http: 从输入 URL 到页面展示到底发生了什么?</h3><ul><li>总体分为以下几个过程 <ul><li><ol><li>DNS解析</li><li>TCP连接</li><li>发送Http请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol></li></ul></li></ul><h3 id="_5-http状态码" tabindex="-1"><a class="header-anchor" href="#_5-http状态码" aria-hidden="true">#</a> 5. Http状态码</h3><p>​ <img src="'+a+'" alt="常见 HTTP 状态码" loading="lazy"></p><h3 id="_6-http和https有什么区别" tabindex="-1"><a class="header-anchor" href="#_6-http和https有什么区别" aria-hidden="true">#</a> 6. Http和Https有什么区别？</h3><ul><li>端口号：http默认80，https默认是443</li><li>url前缀：http https</li><li>安全性与资源消耗：http是传输明文，基于tcp协议，https传输加密，基于SSL/TLS之上</li><li>SEO优化：https有天然的优势</li></ul><h3 id="_7-tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#_7-tcp和udp的区别" aria-hidden="true">#</a> 7. TCP和UDP的区别</h3><ul><li>是否面向连接 <ul><li>TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接</li><li>UDP 在传送数据之前不需要先建立连接</li></ul></li><li>是否可靠传输 <ul><li>TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达</li><li>UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达</li></ul></li><li>是否有状态 <ul><li>TCP 传输是有状态的</li><li>UDP 是无状态服务</li></ul></li><li>传输效率 <ul><li>TCP 的传输效率要比 UDP 低很多</li></ul></li><li>传输形式 <ul><li>TCP 是面向字节流的</li><li>UDP 是面向报文的</li></ul></li><li>首部开销 <ul><li>TCP首部开销20 ～ 60 字节</li><li>UDP首部开销8 字节</li></ul></li><li>是否提供广播或多播服务 <ul><li>TCP 只支持点对点通信</li><li>UDP 支持一对一、一对多、多对一、多对多</li></ul></li></ul><h3 id="_8-http是基于tcp还是udp的" tabindex="-1"><a class="header-anchor" href="#_8-http是基于tcp还是udp的" aria-hidden="true">#</a> 8. HTTP是基于TCP还是UDP的？</h3><ul><li>HTTP/3.0 之前是基于 TCP 协议的，而 HTTP/3.0 将弃用 TCP，改用 <strong>基于 UDP 的 QUIC 协议</strong><ul><li>为了解决了 HTTP/2 中存在的队头阻塞问题</li></ul></li></ul><h3 id="_9-tcp的三次握手和四次挥手-非常重要" tabindex="-1"><a class="header-anchor" href="#_9-tcp的三次握手和四次挥手-非常重要" aria-hidden="true">#</a> 9. TCP的三次握手和四次挥手（非常重要）</h3><ul><li><p>建立三次握手流程</p><ul><li><p><strong>一次握手</strong></p><ul><li>客户端发送带有 SYN（SEQ=x） 标志的数据包 -&gt; 服务端，然后客户端进入 <strong>SYN_SEND</strong> 状态，等待服务器的确认</li></ul></li><li><p><strong>二次握手</strong></p><ul><li>服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 –&gt; 客户端,然后服务端进入 <strong>SYN_RECV</strong> 状态</li></ul></li><li><p><strong>三次握手</strong></p><ul><li>客户端发送带有 ACK(ACK=y+1) 标志的数据包 –&gt; 服务端，然后客户端和服务器端都进入<strong>ESTABLISHED</strong> 状态，完成 TCP 三次握手</li></ul><figure><img src="'+s+'" alt="image-20240123141214004" tabindex="0" loading="lazy"><figcaption>image-20240123141214004</figcaption></figure></li></ul></li><li><p>为什么要三次握手？</p><ul><li><p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的</p></li><li><p><strong>第一次握手</strong>：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</p></li><li><p><strong>第二次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</p></li><li><p><strong>第三次握手</strong>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</p></li><li><p>二次握手为啥不行？</p><ul><li>举个现实的例子 <ul><li>你打我电话，电话铃声响起表示请求开始通话</li><li>我听到铃声，接电话说您好</li><li>但是实际情况可能是，你突然被紧急的事情打断，放下了电话，而我这边只能一直等待你说话，处于一种“悬挂”的状态</li></ul></li></ul></li></ul></li><li><p>四次挥手</p><ul><li><p><strong>第一次挥手</strong>：客户端发送一个 FIN（SEQ=x） 标志的数据包-&gt;服务端，用来关闭客户端到服务器的数据传送。然后客户端进入 <strong>FIN-WAIT-1</strong> 状态</p></li><li><p><strong>第二次挥手</strong>：服务器收到这个 FIN（SEQ=X） 标志的数据包，它发送一个 ACK （ACK=x+1）标志的数据包-&gt;客户端 。然后服务端进入 <strong>CLOSE-WAIT</strong> 状态，客户端进入 <strong>FIN-WAIT-2</strong> 状态</p></li><li><p><strong>第三次挥手</strong>：服务端发送一个 FIN (SEQ=y)标志的数据包-&gt;客户端，请求关闭连接，然后服务端进入 <strong>LAST-ACK</strong> 状态</p></li><li><p><strong>第四次挥手</strong>：客户端发送 ACK (ACK=y+1)标志的数据包-&gt;服务端，然后客户端进入<strong>TIME-WAIT</strong>状态，服务端在收到 ACK (ACK=y+1)标志的数据包后进入 CLOSE 状态。此时如果客户端等待 <strong>2MSL</strong> 后依然没有收到回复，就证明服务端已正常关闭，随后客户端也可以关闭连接了</p><figure><img src="'+n+'" alt="image-20240123142630027" tabindex="0" loading="lazy"><figcaption>image-20240123142630027</figcaption></figure></li></ul></li><li><p>三次挥手行不行？</p><ul><li>不行，如果少了第三次挥手，因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复 ACK，表示接收到了断开连接的请求。等到数据发完之后再发 FIN，断开服务器到客户端的数据传送</li><li>如果没有第四次挥手（客户端对服务器的FIN的确认），则服务器将无法确认客户端是否已经接收到其发送的FIN消息，导致服务器不确定是否可以安全关闭连接，可能出现资源未释放或数据丢失的风险</li></ul></li></ul>',20),u=[e];function h(p,g){return i(),t("div",null,u)}const _=l(o,[["render",h],["__file","computerBase.html.vue"]]);export{_ as default};
