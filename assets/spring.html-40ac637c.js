import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-57970fd2.js";const i="/assets/image-20240318160307799-d5483b82.png",t={},l=e(`<h1 id="spring-springboot" tabindex="-1"><a class="header-anchor" href="#spring-springboot" aria-hidden="true">#</a> Spring+SpringBoot</h1><h2 id="_1-sping-ioc" tabindex="-1"><a class="header-anchor" href="#_1-sping-ioc" aria-hidden="true">#</a> 1. Sping Ioc</h2><h3 id="_1-谈谈你对spring-ioc的理解" tabindex="-1"><a class="header-anchor" href="#_1-谈谈你对spring-ioc的理解" aria-hidden="true">#</a> 1. 谈谈你对spring ioc的理解？</h3><ul><li><p>ioc</p><ul><li>控制反转（Inversion of Control）</li><li>IOC是一种设计思想，就是将原本在程序中手动创建对象的控制权，交给spring框架来管理</li><li>控制 <ul><li>指的是对象创建的权力</li></ul></li><li>反转 <ul><li>控制权交给外部环境（Spring 框架，IOC容器）</li></ul></li><li>将对象之间的相互依赖关系交给ioc容器来管理，并由ioc容器完成对象的注入</li></ul></li><li><p>实现原理</p><p>Spring IoC（Inversion of Control，控制反转）是Spring框架的核心特性之一，它通过容器（ApplicationContext）来管理和装配Bean（Java对象）。IoC的设计理念是将对象的创建和管理责任转移给容器，而不是硬编码在应用程序代码中，这样可以降低组件之间的耦合度，提高代码的灵活性和可维护性。</p><p><strong>Spring IoC实现原理：</strong></p><ol><li><p><strong>容器初始化</strong>：</p><ul><li>Spring容器在启动时会读取配置信息，这些配置信息可以来自于XML配置文件、注解、Java配置类等。</li><li>容器会解析这些配置信息，构建一个完整的对象依赖关系图谱（Dependency Graph）。</li></ul></li><li><p><strong>Bean的定义与注册</strong>：</p><ul><li>用户在配置中定义Bean，通过<code>&lt;bean&gt;</code>标签或<code>@Component</code>等注解声明类为Spring Bean，并可以设置其属性、初始化方法、销毁方法以及作用域等信息。</li><li>容器根据这些定义创建Bean实例。</li></ul></li><li><p><strong>依赖注入（DI, Dependency Injection）</strong>：</p><ul><li>Spring IoC容器通过依赖注入来管理Bean间的依赖关系。</li><li>依赖注入有两种主要形式：构造器注入（Constructor Injection）和setter注入（Setter Injection）。</li><li>构造器注入是在创建Bean时通过构造函数传递依赖对象，setter注入则是通过setter方法在Bean创建后设置依赖对象。</li></ul></li><li><p><strong>自动装配（Auto Wiring）</strong>：</p><ul><li>Spring还支持自动装配，容器可以根据Bean的类型、名称或其他条件自动匹配和注入依赖。</li><li>通过<code>@Autowired</code>注解可以实现自动装配。</li></ul></li><li><p><strong>生命周期管理</strong>：</p><ul><li>Spring IoC容器负责管理Bean的完整生命周期，包括实例化、初始化、依赖注入、使用以及销毁等阶段。</li><li>用户可以通过实现<code>InitializingBean</code>接口或定义<code>init-method</code>，以及实现<code>DisposableBean</code>接口或定义<code>destroy-method</code>来定制Bean的初始化和销毁逻辑。</li></ul></li><li><p><strong>Scope管理</strong>：</p><ul><li>Spring容器支持多种作用域，如Singleton（默认，单例）、Prototype（每次请求都会新建一个实例）、Request、Session（仅在Web应用中可用）等，确保在正确的作用域范围内创建和管理Bean。</li></ul></li></ol><p>通过以上机制，Spring IoC容器担当了一个工厂的角色，负责创建、装配和管理应用中的所有对象，实现了对象的解耦和松散耦合的架构。</p></li></ul><h3 id="_2-spring-bean" tabindex="-1"><a class="header-anchor" href="#_2-spring-bean" aria-hidden="true">#</a> 2. Spring Bean</h3><ul><li>是指被IOC容器所管理的对象</li><li>通过xml或注解配置</li></ul><h3 id="_3-将一个类声明bean的注解有哪些" tabindex="-1"><a class="header-anchor" href="#_3-将一个类声明bean的注解有哪些" aria-hidden="true">#</a> 3. 将一个类声明Bean的注解有哪些？</h3><ul><li>@Component</li><li>@Repository</li><li>@Service</li><li>@Controller</li></ul><h3 id="_4-注入bean的注解有哪些" tabindex="-1"><a class="header-anchor" href="#_4-注入bean的注解有哪些" aria-hidden="true">#</a> 4. 注入Bean的注解有哪些？</h3><ul><li>@Autowired</li><li>@Resource</li><li>@Inject</li></ul><h3 id="_5-autowired和-resource的区别是什么" tabindex="-1"><a class="header-anchor" href="#_5-autowired和-resource的区别是什么" aria-hidden="true">#</a> 5. @Autowired和@Resource的区别是什么？</h3><ul><li>@Autowired 是spring提供的注解，@Resource是jdk提供的注解</li><li><strong>@Autowired默认的注入方式为byType(根据类型进行匹配)，@Resource默认注入方式为byName(根据名称进行匹配)</strong></li><li>当一个接口存在多个实现类的情况下，<code>@Autowired</code> 和<code>@Resource</code>都需要通过名称才能正确匹配到对应的 Bean。<code>Autowired</code> 可以通过 <code>@Qualifier</code> 注解来显式指定名称，<code>@Resource</code>可以通过 <code>name</code> 属性来显式指定名称</li><li><code>@Autowired</code> 支持在构造函数、方法、字段和参数上使用。<code>@Resource</code> 主要用于字段和方法上的注入，不支持在构造函数或参数上使用</li></ul><h3 id="_5-bean的作用域有哪些" tabindex="-1"><a class="header-anchor" href="#_5-bean的作用域有哪些" aria-hidden="true">#</a> 5. Bean的作用域有哪些？</h3><ul><li><p>singleton</p><ul><li>只存在一个实例</li></ul></li><li><p>prototype</p><ul><li>每次对该bean的请求都会创建一个新的实例</li></ul></li><li><p>request</p><ul><li>每个http请求都会创建一个新的实例，该实例仅在当前http请求内有效</li></ul></li><li><p>session</p><ul><li>每个http会话都会创建一个新的实例，该实例仅在当前会话内有效</li></ul></li><li><p>global session</p><ul><li>该实例仅在当前全局会话内有效</li></ul></li><li><p>application</p><ul><li>每个servletContext都会创建一个新的实例，该实例在整个web应用中有效</li></ul></li><li><p>websocket</p><ul><li>在当前websocket会话内有效</li></ul></li><li><p>如何配置bean的作用域呢？</p><ul><li><p>xml方式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_6-bean的生命周期了解么" tabindex="-1"><a class="header-anchor" href="#_6-bean的生命周期了解么" aria-hidden="true">#</a> 6. Bean的生命周期了解么？</h3><p>Spring框架中的bean生命周期包括以下几个阶段：</p><ol><li>实例化（Instantiation）：当Spring容器启动时，会根据配置文件或注解来实例化bean对象。 <ul><li>通俗理解 <ul><li>内存中申请一块内存空间</li><li>租赁好房子，自己的家具东西还没搬家进去</li></ul></li></ul></li><li>属性设置（Population）：在实例化之后，Spring容器会通过依赖注入或者调用setter方法来设置bean的属性。</li><li>初始化（Initialization）：在属性设置完成后，Spring容器会调用bean的初始化方法（可以通过@PostConstruct注解或实现InitializingBean接口来定义初始化方法）。 <ul><li>通俗理解 <ul><li>完成属性的各种赋值</li><li>装修、家电家具进场</li></ul></li></ul></li><li>使用（In Use）：此时bean已经初始化完成，可以被其他bean或组件使用。</li><li>销毁（Destruction）：当Spring容器关闭时，会调用bean的销毁方法（可以通过@PreDestroy注解或实现DisposableBean接口来定义销毁方法）。</li></ol><p>通过实现InitializingBean和DisposableBean接口、使用@PostConstruct和@PreDestroy注解、配置init-method和destroy-method属性等方式，可以对bean的初始化和销毁过程进行定制化操作。</p><h2 id="_2-spring-aop" tabindex="-1"><a class="header-anchor" href="#_2-spring-aop" aria-hidden="true">#</a> 2. Spring Aop</h2><h3 id="_1-谈谈你对aop的理解" tabindex="-1"><a class="header-anchor" href="#_1-谈谈你对aop的理解" aria-hidden="true">#</a> 1. 谈谈你对aop的理解？</h3><ul><li><p>aop</p><ul><li><p>aspect-oriented programming: 面向切面编程</p></li><li><p>能够将与业务无关，却为业务模块所共同调用的逻辑（如事务处理、日志管理、权限控制）封装起来，便于减少系统的重复代码，降低模块间的耦合度</p></li><li><p>spring aop 是基于动态代理的，如果要代理的对象，实现了某个接口，那么spring aop就会使用jdk proxy, 去创建对象，而对于没有实现接口的对象，spring会使用cglib生成一个被代理对象的子类来作为代理</p></li><li><p>spring aop 的实现主要依赖于代理模式和反射模式</p></li></ul></li><li><p>补充：jdk动态代理和cglib代理</p><ul><li>jdk动态代理 <ul><li>目标类和代理类要实现相同的接口</li><li>jdk的动态代理主要涉及java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中InvocationHandler是一个接口，可以通过实现该接口定义横切逻辑；而Proxy为InvocationHandler实现类动态创建一个符合某一接口的代理实例</li><li>jdk动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理</li></ul></li><li>cglib代理 <ul><li>代理类是目标类的子类，依赖cglib.jar</li><li>cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理</li></ul></li></ul></li></ul><h2 id="_3-spring-mvc" tabindex="-1"><a class="header-anchor" href="#_3-spring-mvc" aria-hidden="true">#</a> 3. Spring MVC</h2><h3 id="_1-spring-mvc的核心组件" tabindex="-1"><a class="header-anchor" href="#_1-spring-mvc的核心组件" aria-hidden="true">#</a> 1. spring mvc的核心组件</h3><ul><li>dispatcherServlet: 核心的中央处理器，负责接收请求、分发</li><li>handlerMapping: 处理器映射器，根据url去匹配查找能处理的handler，并会将请求涉及到的拦截器和handler一起封装’</li><li>hadlerAdapter: 处理器适配器，根据HandlerMapping 找到的Handler,适配执行对应的Handler</li><li>Handler: 请求处理器，处理实际请求的处理器</li><li>ViewResolver: 视图解析器</li></ul><h3 id="_2-spring-mvc的原理" tabindex="-1"><a class="header-anchor" href="#_2-spring-mvc的原理" aria-hidden="true">#</a> 2. Spring Mvc的原理？</h3><p>Spring MVC是Spring框架中用于构建Web应用程序的一部分，它基于MVC（Model-View-Controller）设计模式，用于处理Web请求和响应。下面是Spring MVC的工作原理：</p><ol><li><p>客户端发送请求：客户端（通常是浏览器）发送HTTP请求到Web服务器。</p></li><li><p>DispatcherServlet接收请求：在Spring MVC中，所有的请求都会先经过DispatcherServlet，它充当前端控制器的角色。DispatcherServlet接收到请求后，会根据配置找到合适的处理器（Handler）来处理请求。</p></li><li><p>处理器映射器（Handler Mapping）：处理器映射器负责将请求映射到相应的处理器（Controller）。它会根据请求的URL和其他条件找到合适的处理器来处理请求。</p></li><li><p>执行处理器（Controller）：一旦找到了合适的处理器，DispatcherServlet会将请求转发给该处理器。处理器执行业务逻辑，可能会调用业务逻辑组件来处理请求，并返回一个ModelAndView对象，其中包含了处理结果和视图名称。</p></li><li><p>视图解析器（View Resolver）：视图解析器负责将逻辑视图名称解析为实际的视图对象。它会根据视图名称找到对应的视图对象，通常是一个JSP、Thymeleaf、Freemarker等模板文件。</p></li><li><p>渲染视图：一旦找到了视图对象，DispatcherServlet会将模型数据传递给视图对象，视图对象会将模型数据渲染为最终的HTML页面。</p></li><li><p>响应客户端：渲染完视图后，DispatcherServlet将响应返回给客户端，完成一次请求-响应周期。</p></li></ol><p>Spring MVC的核心是DispatcherServlet，它协调整个请求处理流程，通过处理器映射器、处理器适配器、视图解析器等组件来实现请求的分发和处理。通过这种方式，Spring MVC能够将业务逻辑和视图展示分离，使得Web应用程序的开发更加模块化和灵活。</p><h3 id="_3-统一异常处理怎么做" tabindex="-1"><a class="header-anchor" href="#_3-统一异常处理怎么做" aria-hidden="true">#</a> 3. 统一异常处理怎么做？</h3><p>使用注解</p><ul><li><p>@ControllerAdvice + @ExceptionHandler</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BaseException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleAppException</span><span class="token punctuation">(</span><span class="token class-name">BaseException</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//......</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ResourceNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ErrorReponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResourceNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">ResourceNotFoundException</span> ex<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//......</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-spring-事务" tabindex="-1"><a class="header-anchor" href="#_4-spring-事务" aria-hidden="true">#</a> 4. Spring 事务</h2><h3 id="_1-spring事务的传播行为" tabindex="-1"><a class="header-anchor" href="#_1-spring事务的传播行为" aria-hidden="true">#</a> 1. spring事务的传播行为</h3><ol><li>REQUIRED（默认）：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式执行。</li><li>MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则将当前事务挂起。</li><li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，则将当前事务挂起。</li><li>NEVER：以非事务方式执行操作，如果当前存在事务，则抛出异常。</li><li>NESTED：如果当前存在事务，则在嵌套事务内执行；如果当前没有事务，则创建一个新的事务。</li></ol><h3 id="_2-spring的事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_2-spring的事务隔离级别" aria-hidden="true">#</a> 2. spring的事务隔离级别</h3><ol><li><p>DEFAULT：使用数据库默认的隔禅级别，通常为数据库的默认隔离级别。</p></li><li><p>READ_UNCOMMITTED：允许一个事务读取另一个事务未提交的数据修改，会导致脏读、不可重复读和幻读的问题。</p></li><li><p>READ_COMMITTED：一个事务只能读取另一个事务已经提交的数据，可以避免脏读，但可能会出现不可重复读和幻读的问题。</p></li><li><p>REPEATABLE_READ：确保在事务执行期间多次读取相同数据时，会得到相同的结果，可以避免脏读和不可重复读，但仍可能出现幻读的问题。</p></li><li><p>SERIALIZABLE：最高的隔离级别，确保事务可以完全隔离，不会出现脏读、不可重复读和幻读的问题，但性能较差</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token function">DEFAULT</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">READ_UNCOMMITTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_READ_UNCOMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">READ_COMMITTED</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_READ_COMMITTED</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">REPEATABLE_READ</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_REPEATABLE_READ</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SERIALIZABLE</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span><span class="token punctuation">.</span><span class="token constant">ISOLATION_SERIALIZABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_5-spring-框架中用到的设计模式" tabindex="-1"><a class="header-anchor" href="#_5-spring-框架中用到的设计模式" aria-hidden="true">#</a> 5. Spring 框架中用到的设计模式</h2><ul><li>工厂设计模式 <ul><li>BeanFactory、ApplicationContext 创建bean对象</li></ul></li><li>代理设计模式 <ul><li>spring 中的bean默认都是单例的</li></ul></li><li>模板方法模式 <ul><li>spring中的jdbcTemplate 等对数据库操作的类</li></ul></li><li>观察者模式 <ul><li>spring 事件驱动模型</li></ul></li><li>适配器模式 <ul><li>spring aop 的增强或通知以及mvc中适配controller</li></ul></li></ul><h2 id="_6-spring-springboot常用注解" tabindex="-1"><a class="header-anchor" href="#_6-spring-springboot常用注解" aria-hidden="true">#</a> 6. Spring&amp;Springboot常用注解</h2><h3 id="_1-springbootapplication" tabindex="-1"><a class="header-anchor" href="#_1-springbootapplication" aria-hidden="true">#</a> 1. @SpringBootApplication</h3><ul><li>加在主类上</li><li>等同于 @Configuration+@EnableAutoConfiguration +@ComponentScan <ul><li>@EnableAutoConfiguration <ul><li>启用SpringBoot的自动配置机制</li></ul></li><li>@ComponentScan <ul><li>扫描被<code>@Component</code> (<code>@Repository</code>,<code>@Service</code>,<code>@Controller</code>)注解的 bean，注解默认会扫描该类所在的包下所有的类</li></ul></li><li>@Configuration <ul><li>允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</li></ul></li></ul></li></ul><h3 id="_2-spring-bean相关" tabindex="-1"><a class="header-anchor" href="#_2-spring-bean相关" aria-hidden="true">#</a> 2. Spring Bean相关</h3><h4 id="_2-1-autowired" tabindex="-1"><a class="header-anchor" href="#_2-1-autowired" aria-hidden="true">#</a> 2.1 @AutoWired</h4><h4 id="_2-2-component-repository-service-controller" tabindex="-1"><a class="header-anchor" href="#_2-2-component-repository-service-controller" aria-hidden="true">#</a> 2.2 @Component @Repository @Service @Controller</h4><ul><li>@Component <ul><li>通用的注解，可标注任意类为Spring组件</li></ul></li></ul><h4 id="_2-3-restcontroller" tabindex="-1"><a class="header-anchor" href="#_2-3-restcontroller" aria-hidden="true">#</a> 2.3 @RestController</h4><ul><li>@Controller + @ ResponseBody</li><li>将函数的返回值直接填入http响应体中，是Rest风格的控制器</li></ul><h4 id="_2-4-scope" tabindex="-1"><a class="header-anchor" href="#_2-4-scope" aria-hidden="true">#</a> 2.4 @Scope</h4><ul><li><p>声明spring bean 的作用域</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;singleton&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-5-configuration" tabindex="-1"><a class="header-anchor" href="#_2-5-configuration" aria-hidden="true">#</a> 2.5 @Configuration</h4><ul><li><p>一般用来声明配置类，可以使用@Component注解替代</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TransferService</span> <span class="token function">transferService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TransferServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-http相关" tabindex="-1"><a class="header-anchor" href="#_3-http相关" aria-hidden="true">#</a> 3. http相关</h3><h4 id="_3-1-getmapping" tabindex="-1"><a class="header-anchor" href="#_3-1-getmapping" aria-hidden="true">#</a> 3.1 @GetMapping</h4><ul><li><p>get请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-2-postmapping" tabindex="-1"><a class="header-anchor" href="#_3-2-postmapping" aria-hidden="true">#</a> 3.2 @PostMapping</h4><h4 id="_3-3-putmapping" tabindex="-1"><a class="header-anchor" href="#_3-3-putmapping" aria-hidden="true">#</a> 3.3 @PutMapping</h4><h4 id="_3-4-deletemapping" tabindex="-1"><a class="header-anchor" href="#_3-4-deletemapping" aria-hidden="true">#</a> 3.4 @DeleteMapping</h4><h3 id="_4-前后端传值" tabindex="-1"><a class="header-anchor" href="#_4-前后端传值" aria-hidden="true">#</a> 4. 前后端传值</h3><h4 id="_4-1-pathvariable-和-requestparam" tabindex="-1"><a class="header-anchor" href="#_4-1-pathvariable-和-requestparam" aria-hidden="true">#</a> 4.1 @PathVariable 和 @RequestParam</h4><ul><li><p>@PathVariable： 用于获取路径参数</p></li><li><p>@RequestParam: 用于获取查询参数</p></li><li><p>举例</p><ul><li><p>假设请求url: /klasses/123456/teachers?type=web</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/klasses/{klassId}/teachers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Teacher</span><span class="token punctuation">&gt;</span></span> <span class="token function">getKlassRelatedTeachers</span><span class="token punctuation">(</span>
         <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;klassId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> klassId<span class="token punctuation">,</span>
         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> type <span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

获取到的数据为：klassId<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">,</span>type<span class="token operator">=</span>web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="_4-2-requestbody" tabindex="-1"><a class="header-anchor" href="#_4-2-requestbody" aria-hidden="true">#</a> 4.2 @RequestBody</h4><ul><li><p><strong>用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且Content-Type 为 application/json 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去</strong></p></li><li><p>需要注意： 一个请求方法只可以有一个 @RequestBody</p></li></ul><h3 id="_5-读取配置文件" tabindex="-1"><a class="header-anchor" href="#_5-读取配置文件" aria-hidden="true">#</a> 5. 读取配置文件</h3><h4 id="_5-1-value-常用" tabindex="-1"><a class="header-anchor" href="#_5-1-value-常用" aria-hidden="true">#</a> 5.1 @Value(常用)</h4><ul><li>使用 <code>@Value(&quot;\${property}&quot;)</code> 读取比较简单的配置信息</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${test}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-configurationproperties-常用" tabindex="-1"><a class="header-anchor" href="#_5-2-configurationproperties-常用" aria-hidden="true">#</a> 5.2 @ConfigurationProperties(常用)</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">wuhan2020</span><span class="token punctuation">:</span> 2020年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！

<span class="token key atrule">my-profile</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Guide哥
  <span class="token key atrule">email</span><span class="token punctuation">:</span> koushuangbwcx@163.com

<span class="token key atrule">library</span><span class="token punctuation">:</span>
  <span class="token key atrule">location</span><span class="token punctuation">:</span> 湖北武汉加油中国加油
  <span class="token key atrule">books</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 天才基本法
      <span class="token key atrule">description</span><span class="token punctuation">:</span> 二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 时间的秩序
      <span class="token key atrule">description</span><span class="token punctuation">:</span> 为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 了不起的我
      <span class="token key atrule">description</span><span class="token punctuation">:</span> 如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？ 如何走出人生的艰难时刻？

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;library&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">LibraryProperties</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@NotEmpty</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Setter</span>
    <span class="token annotation punctuation">@Getter</span>
    <span class="token annotation punctuation">@ToString</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  省略getter<span class="token operator">/</span>setter
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-propertysource" tabindex="-1"><a class="header-anchor" href="#_5-3-propertysource" aria-hidden="true">#</a> 5.3 @PropertySource</h4><ul><li><p>读取指定properties文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:website.properties&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${url}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

  省略getter<span class="token operator">/</span>setter
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_7-springboot-自动装配原理" tabindex="-1"><a class="header-anchor" href="#_7-springboot-自动装配原理" aria-hidden="true">#</a> 7 . Springboot 自动装配原理？</h2><h3 id="_1-什么是自动装配" tabindex="-1"><a class="header-anchor" href="#_1-什么是自动装配" aria-hidden="true">#</a> 1. 什么是自动装配？</h3><ul><li>减去繁琐的配置，通过注解或者一些简单的配置就能在spring boot下实现某块功能</li></ul><h3 id="_2-springboot-是如何实现自动装配的" tabindex="-1"><a class="header-anchor" href="#_2-springboot-是如何实现自动装配的" aria-hidden="true">#</a> 2. Springboot 是如何实现自动装配的</h3><ol><li><strong>@EnableAutoConfiguration</strong>：Spring Boot的自动装配是通过@EnableAutoConfiguration注解来实现的。这个注解会触发Spring Boot的自动配置机制，根据项目的依赖和配置来自动配置应用程序的各种组件。</li><li><strong>条件化配置</strong>：Spring Boot的自动装配是基于条件化配置的，通过@Conditional注解和条件化的配置类来决定是否应该应用某些配置。比如，根据类路径中是否存在某个类、是否存在某个Bean、是否满足某些条件等来决定是否自动配置某个组件。</li><li><strong>自动配置类</strong>：Spring Boot中有大量的自动配置类，这些类用于根据条件来自动配置各种组件，比如数据源、JPA、Web应用程序等。这些自动配置类会根据条件来判断是否需要自动配置某个组件。</li><li><strong>自动扫描</strong>：Spring Boot会自动扫描项目中的依赖和配置，根据扫描到的内容来决定是否需要自动配置某个组件</li></ol><p>springboot 将自动装配的类放在spring-boot-autoconfigure包的META-INF/spring.factories文件中</p><p>总结：</p><ul><li>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖</li></ul><h2 id="_8-spring-循环依赖" tabindex="-1"><a class="header-anchor" href="#_8-spring-循环依赖" aria-hidden="true">#</a> 8. Spring 循环依赖？</h2><ul><li>定义 <ul><li>多个bean之间相互依赖，形成了一个闭环。比如：A依赖B,B依赖C、C依赖于A</li></ul></li><li>两种依赖方式 <ul><li>构造器循环依赖 <ul><li>spring 容器无法解决构造器级别的循环依赖，因为构造器注入必须在实例化阶段完成，而在实例化过程中遇到循环依赖会导致死锁，spring会抛出BeanCurrentlyInCreationException异常</li></ul></li><li>setter属性循环依赖 <ul><li>setter属性循环依赖是指Bean A通过setter方法注入依赖于Bean B，而Bean B也通过setter方法注入依赖于Bean A</li><li>spring 通过三级缓存机制巧妙地解决了setter注入的循环依赖问题</li></ul></li></ul></li><li>两种注入方式对循环依赖的影响？ <ul><li>AB循环依赖问题只要A的注入方式是setter且singleton,就不会有循环依赖问题</li></ul></li></ul><p>​</p><h2 id="_9-spring-三级缓存" tabindex="-1"><a class="header-anchor" href="#_9-spring-三级缓存" aria-hidden="true">#</a> 9. Spring 三级缓存</h2><ul><li><p>DefaultSingletonBeanRegistry 类</p></li><li><p>三个map</p><ul><li>第一级缓存（也叫单例池）singletonObjects:存放已经经历 了完整生命周期的Bean对象 （成品）</li><li>第二级缓存：earlySingletonObjects,存放早期暴露出来的Bean 对象，Bean的生命周期未结束 （半成品）</li><li>第三级缓存：Map&lt;String,ObjectFactory&gt; singletonFactories, 存放可以生成Bean的工厂 （工厂）</li></ul><figure><img src="`+i+'" alt="image-20240318160307799" tabindex="0" loading="lazy"><figcaption>image-20240318160307799</figcaption></figure></li><li><p>spring内部通过三级缓存来解决循环依赖</p></li><li><p>A/B两对象在三级缓存中的迁移说明</p><ul><li>A创建过程中需要B，于是A将自己放到三级缓存里面，去实例化B</li><li>B实例化的时候发现需要A,于是B先查一级缓存，没有，再查二级缓存，还没没有，再查三级缓存，找到了A然后把三级缓存里面的这个A放到二级缓存里面，并删除三级缓存里面的A</li><li>B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态），然后回来接着创建A,此时B已经创建结束，直接从一级缓存里面拿到B, 然后完成创建，并将A自己放到一级缓存里面</li></ul></li><li><p>四个方法</p><ul><li>getSingleton</li><li>doCreateBean</li><li>populateBean</li><li>addSingleton</li></ul></li></ul><h2 id="_10-springboot的启动流程" tabindex="-1"><a class="header-anchor" href="#_10-springboot的启动流程" aria-hidden="true">#</a> 10. springboot的启动流程</h2><p>Spring Boot 的启动流程可以概括为以下几个关键步骤：</p><ol><li><p><strong>启动入口点</strong>：</p><ul><li>Spring Boot 应用程序的启动始于 <code>public static void main(String[] args)</code> 方法，其中通常会调用 <code>SpringApplication.run(Application.class, args)</code> 方法。</li></ul></li><li><p><strong>初始化SpringApplication</strong>：</p><ul><li>创建 <code>SpringApplication</code> 实例，构造函数中会做一些基本的初始化工作，包括检测和决定应用程序类型（如Servlet容器、反应式容器或无容器）、初始化一些基础的ApplicationContext Initializer 和 ApplicationListener。</li></ul></li><li><p><strong>加载环境和外部配置</strong>：</p><ul><li>Spring Boot 会创建一个 <code>Environment</code> 对象，它封装了应用程序运行时的所有环境属性。环境配置来源于多个地方，包括命令行参数、系统环境变量、JVM系统属性、application.properties 或 application.yml 配置文件等。</li></ul></li><li><p><strong>Spring Boot 的 Auto-Configuration</strong>：</p><ul><li>自动配置是Spring Boot的核心特性之一，它会根据项目类路径（classpath）上的 jar 包和类来智能地决定哪些 beans 应该被添加到 ApplicationContext 中。这个过程通过扫描 <code>META-INF/spring.factories</code> 文件中声明的 <code>EnableAutoConfiguration</code> 类来实现。</li></ul></li><li><p><strong>创建ApplicationContext</strong>：</p><ul><li><code>SpringApplication</code> 通过调用 <code>createApplicationContext()</code> 方法来创建 <code>ApplicationContext</code>，这一步会依据应用程序类型选择合适的上下文实现，如 <code>AnnotationConfigServletWebServerApplicationContext</code>（用于Servlet环境）或 <code>AnnotationConfigReactiveWebServerApplicationContext</code>（用于响应式环境）</li></ul></li></ol><p>6 . <strong>加载Spring Beans</strong>：</p><ul><li>创建好 <code>ApplicationContext</code> 之后，Spring Boot 开始加载和注册所有的 Spring Beans，包括用户自定义的和通过自动配置生成的bean。</li></ul><ol start="7"><li><strong>启动监听器</strong>：</li></ol><ul><li>加载并初始化从 <code>META-INF/spring.factories</code> 文件中声明的 <code>ApplicationListener</code> 实现，这些监听器将在应用生命周期的不同阶段被触发</li></ul><ol start="8"><li><strong>启动嵌入式Web服务器</strong>：</li></ol><ul><li>如果是Web应用程序，Spring Boot会根据配置自动创建和配置嵌入式Web服务器，如Tomcat或Jetty，并将Spring容器注册到Web容器中，使其能够对外提供HTTP服务。</li></ul><ol start="9"><li><strong>执行ApplicationRunner/CommandLineRunner</strong>：</li></ol><ul><li>Spring Boot 会查找并执行实现了 <code>ApplicationRunner</code> 或 <code>CommandLineRunner</code> 接口的bean，这些接口定义的方法会在所有Spring Beans初始化完成后被执行，通常用于应用启动后的额外初始化任务。</li></ul><ol start="10"><li><strong>启动完成</strong>：</li></ol><ul><li>当所有准备工作完成后，Spring Boot 应用程序便处于启动完成并等待处理请求的状态。</li></ul><p>以上就是Spring Boot启动的大致流程，每个步骤都涉及众多细节，但核心思路是简化应用配置、自动装配和启动过程，使得开发者可以快速构建和部署微服务应用。</p><h2 id="_11-spring-beanfactory和factorybean的区别" tabindex="-1"><a class="header-anchor" href="#_11-spring-beanfactory和factorybean的区别" aria-hidden="true">#</a> 11. spring BeanFactory和FactoryBean的区别</h2><ul><li>BeanFactory <ul><li>是Spring Ioc容器的核心接口，它负责管理和实例化应用程序中定义的Bean。</li><li>是个工厂</li></ul></li><li>FacotryBean <ul><li>是一个特殊的Bean, 它是一个接口, 允许开发者通过实现该接口来提供Bean的实例的创建逻辑</li></ul></li></ul>',100),p=[l];function o(c,r){return a(),s("div",null,p)}const k=n(t,[["render",o],["__file","spring.html.vue"]]);export{k as default};
