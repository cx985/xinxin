import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as i}from"./app-57970fd2.js";const l="/assets/image-20240211110630802-38b94e4f.png",e="/assets/image-20240211111205798-463a05e2.png",t="/assets/image-20240211152637599-0f0ed137.png",p="/assets/image-20240211153048779-9fa4a176.png",u="/assets/image-20240211155417244-f87785ff.png",c="/assets/image-20240211155213874-49c47d6c.png",o="/assets/image-20240212145935967-8370d069.png",d="/assets/image-20240212150230483-80eef873.png",r="/assets/image-20240212150342380-1c22b916.png",k="/assets/image-20240212153920900-00387284.png",m="/assets/image-20240212155644485-7a732e01.png",v="/assets/image-20240213102806318-fc19dd1c.png",h={},b=i(`<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h1><h2 id="redis知识梳理" tabindex="-1"><a class="header-anchor" href="#redis知识梳理" aria-hidden="true">#</a> Redis知识梳理</h2><h2 id="_1-redis-为什么这么快" tabindex="-1"><a class="header-anchor" href="#_1-redis-为什么这么快" aria-hidden="true">#</a> 1. redis 为什么这么快</h2><ul><li>redis 基于内存，内存的访问速度是磁盘的上千倍</li><li>redis 基于Reactor模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和io多路复用</li><li>redis 内置了多种优化过后的数据类型/结构实现，性能非常高</li></ul><h2 id="_2-redis的应用" tabindex="-1"><a class="header-anchor" href="#_2-redis的应用" aria-hidden="true">#</a> 2. redis的应用</h2><ul><li>分布式锁 <ul><li>redisson</li></ul></li><li>限流 <ul><li>redis + lua脚本的方式实现了限流</li></ul></li><li>消息队列</li><li>缓存</li><li>复杂业务场景 <ul><li>比如通过bitmap统计活跃用户</li><li>通过sorted set维护排行榜</li></ul></li></ul><h2 id="_3-redis的数据类型" tabindex="-1"><a class="header-anchor" href="#_3-redis的数据类型" aria-hidden="true">#</a> 3. redis的数据类型</h2><h3 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串" aria-hidden="true">#</a> 1. String(字符串)</h3><ul><li><p>命令</p><ul><li><p>最常用</p><ul><li>set key value</li><li>get key</li></ul></li><li><p>数值增减</p><ul><li>递增数字 <ul><li>incr key</li></ul></li><li>增加指定的整数 <ul><li>incrby key increment</li></ul></li><li>递减数值 <ul><li>decr key</li></ul></li><li>减少指定的整数 <ul><li>decrby key decrement</li></ul></li></ul></li><li><p>获取字符串长度</p><ul><li>strlen key</li></ul></li><li><p>分布式锁</p><ul><li><p>setnx key value</p></li><li><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>set key value [EX seconds] [PX milliseconds] [NX][XX]

EX: key在多少秒之后过期
PX: key在多少毫秒之后过期
NX: 当key不存在的时候，才创建key，效果等同于setnx
XX: 当key存在的时候，覆盖key


eg:
set lock order ex 10
get lock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>应用场景</p><ul><li><p>缓存</p></li><li><p>访问数</p></li><li><p>点赞</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>INCR items:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>底层实现</p><ul><li>sds(简单动态字符串)</li></ul></li></ul><h3 id="_2-list-列表" tabindex="-1"><a class="header-anchor" href="#_2-list-列表" aria-hidden="true">#</a> 2. List(列表)</h3><ul><li><p>介绍</p><ul><li>一个双端链表的结构，容量大概是40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景</li></ul></li><li><p>常用命令</p><ul><li>向列表左边添加元素 <ul><li>lpush key value [value...]</li></ul></li><li>向列表右边添加元素 <ul><li>rpush key value [value...]</li></ul></li><li>查看列表 <ul><li>lrange key start stop</li></ul></li><li>获取列表中元素的个数 <ul><li>llen key</li></ul></li></ul><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>lpush cxlist 1 2 3 4 5
lrange cxlist 0 9
llen cxlist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>应用场景</p><ul><li><p>微信公众号订阅的消息</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>我同时关注了人民日报和王者荣耀，假设两个公账号对应的id分别为11，22

只要他们发布了新文章，都会到我的list
lpush likearticle:cx的id 11 22

查看我自己订阅的全部文章
lrange likearticle:cx的id 0 9

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_3-set-集合" tabindex="-1"><a class="header-anchor" href="#_3-set-集合" aria-hidden="true">#</a> 3. Set(集合)</h3><ul><li><p>命令</p><ul><li>添加元素 <ul><li>sadd key member [member...]</li></ul></li><li>删除元素 <ul><li>srem key member[member...]</li></ul></li><li>遍历集合中的所有元素 <ul><li>smembers key</li></ul></li><li>判断元素是否在集合中 <ul><li>sismember key member</li></ul></li><li>获取集合中的元素总数 <ul><li>scard key</li></ul></li><li>从集合中随机弹出一个元素，元素不删除 <ul><li>srandmember key [数字]</li></ul></li><li>从集合中随机弹出一个元素，出一个删一个 <ul><li>spop key [数字]</li></ul></li><li>集合运算 <ul><li>差集 <ul><li>属于A但不属于B的元素构成的集合</li><li>SDIFF key [key...]</li></ul></li><li>交集 <ul><li>属于A同时也属于B的共同拥有的元素构成的集合</li><li>SINTER key [key...]</li></ul></li><li>并集 <ul><li>属于A或者属于B的元素合并后的集合</li><li>SUNION key [key...]</li></ul></li></ul></li></ul></li><li><p>应用场景</p><ul><li><p>网站UV统计</p></li><li><p>文章点赞</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>1. 新增点赞
sadd pub:msgid 点赞用户id1 点赞用户id2

2. 取消点赞
srem pub:msgid 点赞用户id

3.展现所有点赞过的用户
smembers pub:msgid

4.点赞用户数统计，就是常见的点赞红色数字
scard pub:msgid

5.判断某个朋友是否对楼主点赞过
sismember pub:msgid 用户id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>共同好友，好友推荐</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>好友推荐

sadd s1 1 2 3 4 5
sadd s2 3 4 5 6 7
sinter s1 s2
sdiff s1 s2
sdiff s2 s1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>抽奖</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>1.用户id，立即参与按钮
sadd key 用户id

2.显示已经有多少人参与了
scard key

3.抽奖
srandmember key 2 : 随机抽奖2个人，元素不删除
spop key 3: 随机抽奖3个人，元素会删除

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用set实现抽奖系统如何做？</p><ul><li>sadd key value1 value2 .... <ul><li>向指定集合添加一个元素</li></ul></li><li>spop key count <ul><li>随机去除一个或多个，不允许重复</li></ul></li><li>srandmember key count <ul><li>随机取出，允许重复</li></ul></li></ul></li></ul><h3 id="_4-hash-散列" tabindex="-1"><a class="header-anchor" href="#_4-hash-散列" aria-hidden="true">#</a> 4. Hash(散列)</h3><ul><li><p>结构</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>类似Map&lt;String,Map&lt;Object,Object&gt;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>命令</p><ul><li><p>一次设置一个字段值</p><ul><li>hset key field value</li></ul></li><li><p>一次获取一个字段的值</p><ul><li>hget key field</li></ul></li><li><p>一次设置多个字段值</p><ul><li>hmset key field value [field value...]</li></ul></li><li><p>一次获取多个字段值</p><ul><li>hmget key field [field ...]</li></ul></li><li><p>获取所有字段值</p><ul><li>hgetall key</li></ul></li><li><p>获取某个key内的全部数量</p><ul><li>hlen</li></ul></li><li><p>删除一个key</p><ul><li>hdel</li></ul><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>hset cxhash cx1 value1

hget cxhash cx1

hgetall cxhash

hlen cxhash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>应用场景</p><ul><li><p>购物车</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>增加商品
hset shopcar:uid:cx 33333 1
hset shopcar:uid:cx 44444 1

增加商品数量
hincrby shopcar:uid:cx 44444 1

商品总数
hlen shopcar:uid:cx 

全部选择
hgetall shopcar:uid:cx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_5-zset-有序集合" tabindex="-1"><a class="header-anchor" href="#_5-zset-有序集合" aria-hidden="true">#</a> 5. Zset(有序集合)</h3><ul><li><p>命令</p><ul><li>添加元素 <ul><li>zadd key score member [score member...]</li></ul></li><li>增加某个元素的分数 <ul><li>zincrby key increment member</li></ul></li><li>获取元素的排名 <ul><li>从大到小 <ul><li>zrevrank key member</li></ul></li><li>从小到大 <ul><li>zrank key member</li></ul></li></ul></li><li>获取有序集合中指定范围内的成员，按照成员的分数从大到小进行排序 <ul><li>zrevrange key start stop [withscores] <ul><li>可选的WITHSCORES参数表示是否同时返回成员的分数</li></ul></li></ul></li></ul></li><li><p>应用场景</p><ul><li>抖音热搜</li></ul></li></ul><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>    1.点击视频

    zincrby hotvcr:20240211 1 飞驰人生2
    zincrby hotvct:20240211 15 飞驰人生2 3 熊出没

    2.展示当日排行前10条
    zrevrange hotvcr:20240211 0 9 withscores
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-hyperloglog-基数统计" tabindex="-1"><a class="header-anchor" href="#_6-hyperloglog-基数统计" aria-hidden="true">#</a> 6. HyperLogLog(基数统计)</h3><ul><li><p>是什么？</p><ul><li>去重复统计功能的基数估计算法就是hyperloglog <ul><li>基数 <ul><li>是一种数据集，去重复后的真实个数</li></ul></li><li>基数统计 <ul><li>用于统计一个集合中不重复的元素个数，就是对集合去重复后剩余元素的计算</li></ul></li></ul></li><li>hyperLogLog是一种概率算法的实现</li></ul></li><li><p>原理说明</p><ul><li>只是进行不重复的基数统计，不是集合也不保存数据，只记录数量而不是具体内容</li><li>有误差 <ul><li>非精准统计</li><li>牺牲准确率来换取空间，误差仅仅只是0.81%左右</li></ul></li></ul></li><li><p>基本命令</p><ul><li>将所有元素添加到key中 <ul><li>pfadd key element ...</li></ul></li><li>统计key的估算值 <ul><li>pfcount key</li></ul></li><li>合并key至新key <ul><li>pgmerge new_key key1 key2...</li></ul></li></ul></li><li><p>应用场景</p><ul><li><p>页面UV统计</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;------模拟后台有用户点击首页，每个用户来自不同ip地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ip <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Long</span> hll <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hll&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ip={},该ip地址访问首页的次数={}&quot;</span><span class="token punctuation">,</span>ip<span class="token punctuation">,</span>hll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//暂停几秒钟线程</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>底层实现</p><p>Redis 的 HyperLogLog 数据结构底层实现主要依赖于概率算法，用于估计一个大规模集合中不重复元素的数量（即基数）。以下是 HyperLogLog 的关键实现原理：</p><ol><li><p><strong>哈希映射</strong>：</p><ul><li>当向 HyperLogLog 添加元素时，Redis 首先会对元素进行哈希运算，将元素转化为一个长二进制串。</li><li>这个哈希值会根据哈希空间大小被截断，进而映射到一个固定大小的桶（bucket）集合中。</li></ul></li><li><p><strong>存储桶结构</strong>：</p><ul><li>HyperLogLog 内部维护一个固定长度（例如 Redis 中为 16384）的数组，数组中的每个元素代表一个桶，存储一个称为“最大前缀零”的计数（即哈希值对应的二进制串中连续零的最大长度）。</li></ul></li><li><p><strong>前缀零计数</strong>：</p><ul><li>根据哈希值映射到的桶位置，计算对应的二进制串中最长的连续零的个数，并将这个数字作为桶的计数值存储下来。</li><li>桶中存储的计数值越大，表示映射到该桶的元素越多，但哈希碰撞的可能性就越小。</li></ul></li><li><p><strong>基数估算</strong>：</p><ul><li>利用统计学原理，基于所有桶中存储的最大前缀零计数的分布，HyperLogLog 可以估算出大概率下集合基数的大小。</li><li>通过公式转换，可以从这些计数中得出一个近似的基数，尽管这个估计值并非完全准确，但在标准误差范围内（通常为 0.81% 左右），能很好地反映出真实基数。</li></ul></li><li><p><strong>内存优化</strong>：</p><ul><li>无论 HyperLogLog 存储了多少元素，其内存占用始终固定在 12KB 左右（在 Redis 的实现中），这是因为只需存储每个桶的计数值，无需存储实际的元素值。</li></ul></li><li><p><strong>合并操作</strong>：</p><ul><li>HyperLogLog 支持合并多个相同结构的 HyperLogLog，合并后的 HyperLogLog 能够估计所有输入 HyperLogLog 中元素的总基数。</li></ul></li></ol><p>通过这样的设计，Redis 中的 HyperLogLog 实现了在有限内存中估算海量数据基数的功能，非常适合于大数据场景下的去重计数需求。</p></li></ul><h3 id="_7-bitmap-位图" tabindex="-1"><a class="header-anchor" href="#_7-bitmap-位图" aria-hidden="true">#</a> 7. Bitmap (位图)</h3><ul><li><p>是什么？</p><ul><li><p>由0和1状态表现的二进制位的bit数据</p></li><li><p>每一个格子里面只能放1或者0，用它来判断Y/N状态</p><figure><img src="`+l+`" alt="image-20240211110630802" tabindex="0" loading="lazy"><figcaption>image-20240211110630802</figcaption></figure></li><li><p>用string类型作为底层数据结构实现的一种统计二值状态的数据类型，本质是数组，它是基于String数据类型的按位的操作。bitmap支持的最大位数是2的32位，极大的节约存储空间，使用512M内存就可以存储42.9亿的字节信息</p></li></ul></li><li><p>能干嘛？</p><ul><li>主要用于状态统计</li><li>可以解决下面类似需求 <ul><li>用户是否登录过</li><li>打卡上下班，签到统计</li><li>日活统计</li><li>最近一周的活跃用户</li></ul></li></ul></li><li><p>基本命令</p><ul><li><p>setbit</p><ul><li>setbit key offset value <ul><li>setbit 键偏移位，只能0或者1</li><li><strong>bitmap的偏移量是从零开始算的</strong></li></ul></li></ul></li><li><p>getbit</p><ul><li>getbit key offset</li></ul></li><li><p>strlen</p><ul><li>统计字节数占用多少</li></ul></li><li><p>bitcount</p></li><li><p>全部键里面含有1的有多少个</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>setbit k2 0 1
setbit k2 1 1
setbit k2 15 1
bitcount k2

输出 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>应用场景</p><ul><li><p>统计活跃用户</p></li><li><p>京东签到领取京豆</p><ul><li>需求说明 <ul><li>签到日历仅展示当月签到数据<br> 签到日历需展示最近连续签到天数<br> 假设当前日期是20240211，且20240211未签到<br> 若20240211已签到且0212未签到，则连续签到天数为1<br> 若20240211已签到且0612已签到，则连续签到天数为2<br> 连续签到天数越多，奖励越大<br> 所有用户均可签到</li></ul></li></ul><figure><img src="`+e+`" alt="image-20240211111205798" tabindex="0" loading="lazy"><figcaption>image-20240211111205798</figcaption></figure><ul><li><p>解决思路</p><ul><li>传统的数据库存储，对于大量用户肯定是不适合的</li><li>一个月最多31天，刚好int类型是32位，那一个int类型就可以搞定一个月</li><li>一条数据直接存储一个月的签到记录，不再是存储一天的签到记录</li></ul></li><li><p>具体实现</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>setbit sign:u1:202402 0 1
setbit sign:u1:202402 1 1
setbit sign:u1:202402 2 1
setbit sign:u1:202402 3 1
setbit sign:u1:202402 30 1

getbit sign:u1:202402 0
getbit sign:u1:202402 1
getbit sign:u1:202402 15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="_8-geospatial-地理位置" tabindex="-1"><a class="header-anchor" href="#_8-geospatial-地理位置" aria-hidden="true">#</a> 8. Geospatial (地理位置)</h3><ul><li><p>命令</p><ul><li><p>GEOADD 多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 key 中</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>GEOADD city 116.403963 39.915119 &quot;天安门&quot; 116.403414 39.924091 &quot;故宫&quot; 116.024067 40.362639 &quot;长城&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>GEOPOS 从键里面返回所有给定位置元素的位置（经度和纬度）</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>GEOPOS city 天安门 故宫
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>GEODIST 返回两个给定位置之间的距离</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>GEODIST city 天安门 长城 km
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>GEORADIUS 以给定的经纬度为中心， 返回与中心的距离不超过给定最大距离的所有位置元素</p></li></ul></li><li><p>应用案例</p><ul><li><p>美团附近酒店推送</p><ul><li><p>解题思路</p><ul><li>GEORADIUS: 以给定的经纬度为中心，找出某一半径内的元素</li></ul></li><li><p>代码实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeoController</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CITY</span> <span class="token operator">=</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/geoadd&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">geoAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;天安门&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.403963</span><span class="token punctuation">,</span><span class="token number">39.915119</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;故宫&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.403414</span> <span class="token punctuation">,</span><span class="token number">39.924091</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;长城&quot;</span> <span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">116.024067</span><span class="token punctuation">,</span><span class="token number">40.362639</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geopos&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取经纬度坐标</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geohash&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//geohash算法生成的base32编码值</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/geodist&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Distance</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token class-name">String</span> member1<span class="token punctuation">,</span> <span class="token class-name">String</span> member2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Distance</span> distance<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member1<span class="token punctuation">,</span>member2<span class="token punctuation">,</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>DistanceUnit</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> distance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过经度，纬度查找附近的
     * 北京王府井位置116.418017,39.914402
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/georadius&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//这个坐标是北京王府井位置</span>
        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">116.418017</span><span class="token punctuation">,</span> <span class="token number">39.914402</span><span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">.</span><span class="token function">getMultiplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回50条</span>
        <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span> args <span class="token operator">=</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span><span class="token punctuation">.</span><span class="token function">newGeoRadiusArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> geoResults<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>circle<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> geoResults<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过地方查找附近
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/georadiusByMember&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span> <span class="token function">radiusByMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> member<span class="token operator">=</span><span class="token string">&quot;天安门&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//返回50条</span>
        <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span> args <span class="token operator">=</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span><span class="token punctuation">.</span><span class="token function">newGeoRadiusArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includeCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//半径10公里内</span>
        <span class="token class-name">Distance</span> distance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Distance</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">KILOMETERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> geoResults<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token constant">CITY</span><span class="token punctuation">,</span>member<span class="token punctuation">,</span> distance<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> geoResults<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h2 id="_4-redis-如何判断数据是否过期" tabindex="-1"><a class="header-anchor" href="#_4-redis-如何判断数据是否过期" aria-hidden="true">#</a> 4. redis 如何判断数据是否过期？</h2><h3 id="_1-立刻删除" tabindex="-1"><a class="header-anchor" href="#_1-立刻删除" aria-hidden="true">#</a> 1. 立刻删除</h3><ul><li>对cpu不友好，拿时间换空间</li></ul><h3 id="_2-惰性删除" tabindex="-1"><a class="header-anchor" href="#_2-惰性删除" aria-hidden="true">#</a> 2. 惰性删除</h3><ul><li>只会在取出key的时候才对数据进行过期简称</li></ul><h3 id="_3-定期删除" tabindex="-1"><a class="header-anchor" href="#_3-定期删除" aria-hidden="true">#</a> 3. 定期删除</h3><ul><li>每隔一段时间抽取一批key执行删除过期key操作</li></ul><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h3><ul><li>redis采用定期删除+惰性/懒汉式删除</li><li>如果上面都没被删除到，有漏网之鱼，必须要有个兜底的方案，就是redis缓存淘汰策略</li></ul><h2 id="_5-redis-内存淘汰机制了解么" tabindex="-1"><a class="header-anchor" href="#_5-redis-内存淘汰机制了解么" aria-hidden="true">#</a> 5. redis 内存淘汰机制了解么？</h2><h3 id="_1-redis默认内存多少-在哪查看-如何设置修改" tabindex="-1"><a class="header-anchor" href="#_1-redis默认内存多少-在哪查看-如何设置修改" aria-hidden="true">#</a> 1. redis默认内存多少？在哪查看？如何设置修改？</h3><ul><li>查看redis最大内存 <ul><li>打开redis配置文件，设置maxmemory参数，maxmemory是bytes字节类型，注意转换。</li></ul></li><li>redis默认内存多少可以用 <ul><li>如果不设置最大内存大小或者设置最大内存大小为0，在64位操作系统下不限制内存大小</li></ul></li><li>生产环境如何配置？ <ul><li>一般推荐Redis设置内存为最大物理内存的四分之三</li></ul></li><li>如何修改redis内存设置 <ul><li>命令修改 <ul><li>config set maxmemory 104857600</li><li>config get maxmemory</li></ul></li><li>配置文件修改</li></ul></li><li>如何查看redis内存情况 <ul><li>info memory</li></ul></li></ul><h3 id="_2-redis-缓存淘汰策略" tabindex="-1"><a class="header-anchor" href="#_2-redis-缓存淘汰策略" aria-hidden="true">#</a> 2. redis 缓存淘汰策略</h3><ul><li>noeviction <ul><li>不会驱逐任何key</li></ul></li><li>allkeys-lru（最近最少使用） <ul><li>对所有key使用lru算法进行删除</li></ul></li><li>volatile-lru <ul><li>对所有设置了过期时间的key使用lru算法进行删除</li></ul></li><li>allkeys-random <ul><li>对所有key随机删除</li></ul></li><li>volatile-random <ul><li>对所有设置了过期时间的key随机删除</li></ul></li><li>volatile-ttl <ul><li>删除马上要过期的key</li></ul></li><li>allkeys-lfu <ul><li>对所有key使用lfu算法进行删除</li></ul></li><li>volatile-lfu <ul><li>对所有设置了过期时间的key使用lfu算法进行删除</li></ul></li></ul><p>总结</p><ul><li>2个维度 <ul><li>过期键在筛选</li><li>所有键中筛选</li></ul></li><li>4个方面 <ul><li>lru：最近最少使用</li><li>lfu： 最近最不经常使用</li><li>random</li><li>ttl</li></ul></li></ul><h2 id="_6-布隆过滤器" tabindex="-1"><a class="header-anchor" href="#_6-布隆过滤器" aria-hidden="true">#</a> 6. 布隆过滤器</h2><ul><li><p>是什么？</p><ul><li><strong>由一个初值都为0的bit数组和多个哈希函数构成，主要用于判断一个元素是否在集合中</strong></li><li>本质就是判断具体数据存不存在一个大的集合中</li><li>布隆过滤器是一种类似set的数据结构，只是统计结果不太准确</li></ul></li><li><p>特点</p><ul><li>高效地插入和查询</li><li><strong>一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在</strong></li><li>布隆过滤器可以添加元素，但是不能删除元素，删除会导致误判率增加</li><li>误判只会发生在过滤器没有添加过的元素，对于添加过的元素不会发生误判</li><li>结论备注 <ul><li>有，是可能有</li><li>无，是肯定无 <ul><li>可以保证的是，如果布隆过滤器判断一个元素不在一个集合中，那这个元素一定不会在集合中</li></ul></li></ul></li></ul></li><li><p>原理</p><ul><li><p>初始化</p><ul><li><p>布隆过滤器本质上是由长度为m的位向量或位列表（仅包含0或1位值的列表）组成，最初所有的值均设置为0</p><figure><img src="`+t+'" alt="image-20240211152637599" tabindex="0" loading="lazy"><figcaption>image-20240211152637599</figcaption></figure></li></ul></li><li><p>添加</p><ul><li><p>向布隆过滤器添加数据时，为了尽量地址不冲突，<strong>会使用多个hash函数对key进行运算，得到一个下标索引值</strong>，然后对位数组长度进行取模运算得到一个位置，每个hash函数都会算得一个不同的位置，再把位数组的这几个位置都置为1就完成了add操作</p><figure><img src="'+p+`" alt="image-20240211153048779" tabindex="0" loading="lazy"><figcaption>image-20240211153048779</figcaption></figure></li></ul></li><li><p>判断是否存在</p><ul><li>查询某个key是否存在时，先把这个key通过相同的多个hash函数进行运算，查看对应的位置是否都为1，只要有一个位是0，就证明key不存在；如果这几个位置全都是1，说明极有可能存在的，<strong>因为这些1可能是因为其他的key存在导致的，也就是hash冲突</strong></li></ul></li></ul></li><li><p>优缺点</p><ul><li>优点 <ul><li>高效地插入和查询，占用空间少</li></ul></li><li>缺点 <ul><li>不能删除元素</li><li>存在误判：不同的数据可能出现相同的hash值</li></ul></li></ul></li><li><p>使用场景</p><ul><li>解决缓存穿透问题</li><li>黑名单校验</li></ul></li><li><p>扩展</p><ul><li>布谷鸟过滤器 <ul><li>解决布隆过滤器不能删除元素的问题</li></ul></li></ul></li><li><p>代码实现</p><ul><li><p>使用guava库中的BloomFilter类（只能单机使用）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
                <span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">stringFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token number">1000</span><span class="token punctuation">,</span>
                <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_7-缓存雪崩-缓存击穿-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_7-缓存雪崩-缓存击穿-缓存穿透" aria-hidden="true">#</a> 7. 缓存雪崩+缓存击穿+缓存穿透</h2><h3 id="_1-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_1-缓存雪崩" aria-hidden="true">#</a> 1. 缓存雪崩</h3><ul><li><p>发生</p><ul><li><p>大批缓存同时到期</p><ul><li>比如多个缓存数据设置了相同的过期时间，在同一时刻失效</li></ul></li><li><p>redis主机挂了，redis全盘崩溃</p></li></ul></li><li><p>解决</p><ul><li><p>分散过期时间</p></li><li><p>redis缓存集群实现高可用</p><ul><li>主从+哨兵</li></ul></li></ul></li></ul><h3 id="_2-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_2-缓存穿透" aria-hidden="true">#</a> 2. 缓存穿透</h3><ul><li>是什么？ <ul><li>查询一条记录，先redis后数据库都查询不到该条记录，但是请求每次都会打到数据库上面去，导致后台数据库压力暴增，redis成为了一个摆设</li></ul></li><li>解决 <ul><li><ol><li>空对象缓存</li></ol></li><li><ol start="2"><li>布隆过滤器</li></ol></li></ul></li></ul><h3 id="_3-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_3-缓存击穿" aria-hidden="true">#</a> 3. 缓存击穿</h3><ul><li><p>是什么？</p><ul><li><p>大量的请求同时查询一个key时，key正好失效了，导致大量的请求打到数据库上面去</p></li><li><p>简单来说就是key突然失效了，暴打mysql</p></li></ul></li><li><p>解决</p><ul><li><p>方案一：互斥更新、随机退避、差异失效时间</p><figure><img src="`+u+'" alt="image-20240211155417244" tabindex="0" loading="lazy"><figcaption>image-20240211155417244</figcaption></figure></li><li><p>方案二：对于频繁的热点key，不设置过期时间</p></li><li><p>方案三：互斥独占锁防止击穿</p><figure><img src="'+c+`" alt="image-20240211155213874" tabindex="0" loading="lazy"><figcaption>image-20240211155213874</figcaption></figure></li></ul></li></ul><h2 id="_8-redis分布锁" tabindex="-1"><a class="header-anchor" href="#_8-redis分布锁" aria-hidden="true">#</a> 8. redis分布锁</h2><h3 id="_1-一个靠谱的分布锁锁需要具备的条件和刚需" tabindex="-1"><a class="header-anchor" href="#_1-一个靠谱的分布锁锁需要具备的条件和刚需" aria-hidden="true">#</a> 1. 一个靠谱的分布锁锁需要具备的条件和刚需</h3><ul><li>独占性 <ul><li>任何时刻只能有且仅有一个线程持有</li></ul></li><li>高可用 <ul><li>不能因为某一个节点挂了而出现获取锁和释放锁失败的情况</li></ul></li><li>防死锁 <ul><li>杜绝死锁，必须有超时机制或者撤销操作，有个兜底终止跳出方案</li></ul></li><li>不乱抢 <ul><li>防止张冠李戴，不能私下unlock别人的锁，只能自己加锁自己释放</li></ul></li><li>重入性 <ul><li>同一个节点的同一个线程如果获得锁之后，它也可用再次获取这个锁</li></ul></li></ul><h3 id="_2-为啥要上分布锁" tabindex="-1"><a class="header-anchor" href="#_2-为啥要上分布锁" aria-hidden="true">#</a> 2. 为啥要上分布锁？</h3><ul><li><p>synchronized，单机版ok,上分布式</p></li><li><p>nginx分布式微服务，单机锁不行</p></li><li><p>取消单机锁，上redis分布式锁setnx</p></li><li><p>setnx只加了锁，没有释放锁，出异常的话，可能无法释放锁，必须要在代码层面finally释放锁</p></li><li><p>假设宕机了，代码没有走到finally这块，没办法保证解锁，这个key没有被删除，需要设置key的过期时间</p></li><li><p>为redis的分布锁锁key,增加过期时间，必须要setnx+过期时间在同一行（保证具备原子性）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Boolean</span> flagLock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token number">10L</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>必须规定只能自己删除自己的锁，你不能把别人的锁删除了，防止张冠李戴</p></li><li><p>redis集群环境下，我们自己写的也不ok, 直接上redisson</p></li></ul><h3 id="_3-redisson使用场景" tabindex="-1"><a class="header-anchor" href="#_3-redisson使用场景" aria-hidden="true">#</a> 3. redisson使用场景</h3><ul><li>多个服务间保证同一时刻同一时间段内同一用户只能有一个请求</li></ul><h3 id="_4-redisson的看门狗缓存续命了解么" tabindex="-1"><a class="header-anchor" href="#_4-redisson的看门狗缓存续命了解么" aria-hidden="true">#</a> 4. redisson的看门狗缓存续命了解么？</h3><p>问题：redis分布锁锁过期了，但是业务逻辑还没处理完怎么办？</p><ul><li><p>答：守护线程续命</p><ul><li>额外起一个线程，定期检查线程是否还持有锁，如果有则延长过期时间</li><li>redisson里面使用&quot;看门狗&quot;定期检查（<strong>每1/3的锁时间检查一次</strong>），如果线程还持有锁，则刷新过期时间</li><li>上面有bug，<strong>受系统时钟影响</strong></li></ul></li><li><p>通过redisson新建出来的锁key，<strong>默认是30秒</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Config</span><span class="token punctuation">.</span>java 中
<span class="token keyword">private</span> <span class="token keyword">long</span> lockWatchdogTimeout <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

可以通过修改<span class="token class-name">Config</span><span class="token punctuation">.</span>lockWatchdogTimeout来另行指定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>初始化了一个定时器，dely 的时间是 internalLockLeaseTime/3。</strong><br><strong>在 Redisson 中，internalLockLeaseTime 是 30s，也就是每隔 10s 续期一次，每次 30s</strong></p></li><li><p>标准没有bug写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RLock</span> redissonLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">REDIS_LOCK_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redissonLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>redissonLock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> redissonLock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                redissonLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_9-数据双写一致性问题" tabindex="-1"><a class="header-anchor" href="#_9-数据双写一致性问题" aria-hidden="true">#</a> 9. 数据双写一致性问题</h2><h3 id="_1-缓存双写一致性-谈谈你的理解" tabindex="-1"><a class="header-anchor" href="#_1-缓存双写一致性-谈谈你的理解" aria-hidden="true">#</a> 1. 缓存双写一致性，谈谈你的理解？</h3><ul><li>如果redis中有数据- 需要和数据库中的值相同</li><li>如果redis中无数据-数据库中的值要是最新的值</li></ul><h3 id="_2-缓存操作分类" tabindex="-1"><a class="header-anchor" href="#_2-缓存操作分类" aria-hidden="true">#</a> 2. 缓存操作分类</h3><ul><li>只读缓存</li><li>读写缓存 <ul><li>同步直写策略：写缓存时也同步写数据库，缓存和数据库中的数据一致</li><li>对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略</li></ul></li></ul><h3 id="_3-缓存一致性几种更新策略" tabindex="-1"><a class="header-anchor" href="#_3-缓存一致性几种更新策略" aria-hidden="true">#</a> 3 .缓存一致性几种更新策略</h3><ul><li>目的：保证最终一致性 <ul><li>给缓存设置过期时间，是保证最终一致性的解决方案</li></ul></li></ul><h4 id="_1-先更新数据库-在更新缓存" tabindex="-1"><a class="header-anchor" href="#_1-先更新数据库-在更新缓存" aria-hidden="true">#</a> 1. 先更新数据库，在更新缓存</h4><ul><li>假设在更新redis缓存出现了异常，导致更新失败，会导致两边数据不一致，读到脏数据</li></ul><h4 id="_2-先删除缓存-再更新数据库" tabindex="-1"><a class="header-anchor" href="#_2-先删除缓存-再更新数据库" aria-hidden="true">#</a> 2.先删除缓存，再更新数据库</h4><ul><li>如果A线程正在更新数据库或更新数据库失败，此时B线程请求再次访问缓存时，发现redis里面没数据，缓存缺少，再次读取mysql时，<strong>从数据库读取到的还是旧值</strong>，将旧值写入了缓存</li><li>解决方案 <ul><li>使用互斥锁 <ul><li>多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 互斥锁来锁住它。<br> 其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存</li></ul></li><li>采用延时双删策略 <ul><li>在第一次删除缓存值后，延迟一段时间再次进行删除</li><li>这个延迟时间怎么确定呢？ <ul><li>在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，自行评估自己的项目的读数据业务逻辑的耗时，<br> 以此为基础来进行估算。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上加百毫秒即可</li><li>这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据</li></ul></li><li>性能下降怎么办？ <ul><li>第二次删除可以作为异步，自己启一个线程，异步删除</li></ul></li></ul></li></ul></li></ul><h4 id="_3-先更新数据库-再删除缓存-推荐" tabindex="-1"><a class="header-anchor" href="#_3-先更新数据库-再删除缓存-推荐" aria-hidden="true">#</a> 3.<strong>先更新数据库，再删除缓存（推荐）</strong></h4><ul><li><p>异常问题</p><ul><li>假如缓存删除失败或者来不及，导致请求再次访问redis时缓存命中，读取到的是缓存旧值</li></ul></li><li><p>解决方案</p><ul><li><p>可以把要删除或者要更新的值暂存消息队列中</p></li><li><p>当程序没有成功删除或更新时，可以从消息队列中重新读取，然后再次进行删除或更新</p></li><li><p>如果成功删除或更新，从消息队列去除</p></li><li><p>如果重试一定次数没有成功，发送报警信息给运维人员</p></li></ul></li><li><p>推荐理由</p><ul><li>先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力，严重导致打满mysql</li><li>如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置</li></ul></li></ul><h2 id="_10-redis经典五种数据类型底层实现" tabindex="-1"><a class="header-anchor" href="#_10-redis经典五种数据类型底层实现" aria-hidden="true">#</a> 10 . redis经典五种数据类型底层实现</h2><h3 id="_1-查看类型和编码命令" tabindex="-1"><a class="header-anchor" href="#_1-查看类型和编码命令" aria-hidden="true">#</a> 1. 查看类型和编码命令</h3><ul><li>查看类型 <ul><li>type 键</li></ul></li><li>查看编码 <ul><li>object encoding hello</li></ul></li><li>debug结构 <ul><li>debug object person</li></ul></li></ul><h3 id="_2-string底层结构" tabindex="-1"><a class="header-anchor" href="#_2-string底层结构" aria-hidden="true">#</a> 2. String底层结构</h3><ul><li><p>3大编码格式</p><ul><li><p>int</p><ul><li>保存long型的64位有符合整数</li><li>只有整数才会使用int</li></ul></li><li><p>embstr</p><ul><li>代表embstr格式的sds(简单动态字符串)，保存长度小于44字节的字符串</li><li>embstr: embedded string,表示嵌入式的String</li></ul></li><li><p>raw</p><ul><li>保存长度大于44字节的字符串</li></ul></li></ul></li><li><p>案例测试</p><figure><img src="`+o+'" alt="image-20240212145935967" tabindex="0" loading="lazy"><figcaption>image-20240212145935967</figcaption></figure></li><li><p>SDS</p><ul><li><p>简单动态字符串</p></li><li><p>包含</p><ul><li>int len <ul><li>已用的字节长度</li></ul></li><li>int alloc <ul><li>字符串最大字节长度</li></ul></li><li>char flags <ul><li>用来表示sds的类型</li></ul></li><li>char buf[] <ul><li>真正有效的字符串数据，长度由alloc控制</li></ul></li></ul><figure><img src="'+d+'" alt="image-20240212150230483" tabindex="0" loading="lazy"><figcaption>image-20240212150230483</figcaption></figure></li></ul></li><li><p>redis为什么要重新设计一个sds数据结构？</p><figure><img src="'+r+'" alt="image-20240212150342380" tabindex="0" loading="lazy"><figcaption>image-20240212150342380</figcaption></figure></li><li><p>总结</p><ul><li>Redis内部会根据用户给的不同键值而使用不同的编码格式，自适应地选择较优化的内部编码格式，而这一切对用户完全透明!</li></ul></li></ul><h3 id="_3-hash底层结构" tabindex="-1"><a class="header-anchor" href="#_3-hash底层结构" aria-hidden="true">#</a> 3. hash底层结构</h3><ul><li><p>两种编码格式</p><ul><li>ziplist</li><li>hashtable</li></ul></li><li><p>结构</p><ul><li><p>hash-max-ziplist-entries</p><ul><li>使用压缩列表保存时哈希表集合中的最大元素个数(默认512)</li></ul></li><li><p>hash-max-ziplist-value</p><ul><li>使用压缩列表保存时哈希集合中单个元素的最大长度(默认64)</li></ul></li><li><p>查看上述命令</p><ul><li>config get hash*</li><li>config set hash-max-ziplist-entries 3</li><li>config set hash-max-ziplist-value 8</li></ul></li></ul></li><li><p>结论</p><ul><li>哈希对象保存的键值对数量小于 512 个</li><li>所有的键值对的健和值的字符串长度都小于等于 64byte（一个英文字母一个字节） 时用ziplist，反之用hashtable</li><li>ziplist升级到hashtable可以，反过来降级不可以</li></ul></li><li><p>ziplist</p><ul><li><p>ziplist是一个经过特殊编码的双向链表，<strong>它不存储指向上一个链表节点和指向下一个链表节点的指针，而是存储上一个节点长度和当前长度</strong></p><figure><img src="'+k+'" alt="image-20240212153920900" tabindex="0" loading="lazy"><figcaption>image-20240212153920900</figcaption></figure></li><li><p>已经有链表了，为什么出来一个压缩链表？</p><ul><li>普通的双向链表会有两个指针，在存储数据很小的情况下，我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失</li><li>链表在内存中一般是不连续的，遍历相对比较慢</li><li>压缩链表获取链表长度时不用再遍历整个链表，直接拿到len值就可以了，这个时间复杂度是 O(1)</li></ul></li></ul></li></ul><h3 id="_4-list底层结构" tabindex="-1"><a class="header-anchor" href="#_4-list底层结构" aria-hidden="true">#</a> 4. list底层结构</h3><ul><li><p>命令</p><ul><li><p>config get list*</p></li><li><p>list-max-ziplist-size</p><ul><li><p>ziplist在entry配置</p></li><li><p>默认为-2，当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist的长度</p></li><li><p>-2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）</p></li></ul></li><li><p>list-compress-depth</p><ul><li>ziplist压缩配置</li><li>表示一个quicklist两端不被压缩的节点个数，节点指的是quicklist双向链表的节点</li><li>默认值是0,表示都不压缩</li></ul></li></ul></li><li><p>编码格式</p><ul><li><p>quicklist</p><ul><li><p>是ziplist和linkedlist的结合体</p><figure><img src="'+m+`" alt="image-20240212155644485" tabindex="0" loading="lazy"><figcaption>image-20240212155644485</figcaption></figure></li></ul></li></ul></li></ul><h3 id="_5-set底层结构" tabindex="-1"><a class="header-anchor" href="#_5-set底层结构" aria-hidden="true">#</a> 5. Set底层结构</h3><ul><li>编码格式 <ul><li>intset <ul><li>存储的元素都是整数类型</li></ul></li><li>hashtable <ul><li>不是整数类型，就用hashtable</li></ul></li></ul></li><li>命令 <ul><li>config get set*</li></ul></li></ul><h3 id="_6-zset底层结构" tabindex="-1"><a class="header-anchor" href="#_6-zset底层结构" aria-hidden="true">#</a> 6. ZSet底层结构</h3><ul><li>编码格式 <ul><li>ziplist</li><li>skiplist</li></ul></li><li>命令 <ul><li>config get zset*</li><li>zset_max_ziplist_entries(默认128)</li><li>zset_max_ziplist_value(默认值是64)</li></ul></li><li>结论 <ul><li>大于上面两个默认值时会使用跳表</li><li>否则使用ziplist</li></ul></li></ul><h3 id="_7-跳表" tabindex="-1"><a class="header-anchor" href="#_7-跳表" aria-hidden="true">#</a> 7. 跳表</h3><ul><li>是什么？ <ul><li>跳表=链表+多级索引</li><li>跳表是可以实现二分查找的有序链表（由于链表无法进行二分查找，借用数据库索引思想，提取出链表中关键节点当索引，先在关键节点上查找，再进入下层链表查找）</li></ul></li><li>为啥使用跳表而不使用B+树呢？ <ul><li>跳表插入新元素时，只需修改几个指针就能完成，而B+树插入新节点可能导致节点分裂</li><li>跳表支持高效的范围查询</li><li>跳表的实现相对B+树更为简单，因为它没有节点分裂、合并等复杂操作，也不需要强制保持严格的平衡</li><li>跳表的高度是动态调整的，可以根据数据规模的变化自动调整索引层次，以保持较高的查询效率</li></ul></li></ul><h2 id="_11-redis-持久化" tabindex="-1"><a class="header-anchor" href="#_11-redis-持久化" aria-hidden="true">#</a> 11. redis 持久化</h2><h3 id="_1-持久化方式" tabindex="-1"><a class="header-anchor" href="#_1-持久化方式" aria-hidden="true">#</a> 1. 持久化方式</h3><ul><li><p>RDB(快照 snapshotting)</p></li><li><p>AOF(只追加文件，append-only file)</p></li><li><p>RDB和AOF的混合持久化(4.0版本后新增)</p><p>RDB是redis默认采用的持久化方式，在redis.conf配置文件中默认有此下配置</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>save 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。

save 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。

save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-rdb创建快照时会阻塞主线程吗" tabindex="-1"><a class="header-anchor" href="#_2-rdb创建快照时会阻塞主线程吗" aria-hidden="true">#</a> 2. RDB创建快照时会阻塞主线程吗？</h3><p>redis提供了两个命令来生成RDB快照文件</p><ul><li>save <ul><li>同步保存操作，会阻塞redis主线程</li></ul></li><li>bgsave <ul><li>fork出一个子线程，子线程执行，不会阻塞redis主线程，默认选项</li></ul></li></ul><h3 id="_3-aof持久化" tabindex="-1"><a class="header-anchor" href="#_3-aof持久化" aria-hidden="true">#</a> 3 . AOF持久化</h3><ul><li><p>什么是aof持久化</p><ul><li><p>aof持久化的实时性更好，redis6.0以后默认开启</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>appendonly yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>开启aof持久化后每执行一条会更改redis中的数据的命令，redis就会将该命令写入aof缓存区，然后再写入文件中，最后再根据持久化方式（fsync策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中的</p></li></ul></li><li><p>持久化方式</p><ul><li>appendfsync always</li><li>appendfsync everysec(兼顾数据和写入性能，推荐)</li><li>appendsync no</li></ul></li></ul><h3 id="_4-如何选择rdb-和aof" tabindex="-1"><a class="header-anchor" href="#_4-如何选择rdb-和aof" aria-hidden="true">#</a> 4 . 如何选择RDB 和AOF?</h3><ul><li>如果redis保存的数据丢失一些也没有什么影响的化，可以选择使用rdb</li><li>不建议单独使用aof</li><li>如果保存的数据要求安全性比较高的话，建议同时开启RDB和AOF持久化或者开启RDB和AOF混合持久化</li></ul><h2 id="_12-redis的i-o多路复用模型" tabindex="-1"><a class="header-anchor" href="#_12-redis的i-o多路复用模型" aria-hidden="true">#</a> 12. redis的I/O多路复用模型</h2><h3 id="_1-是什么" tabindex="-1"><a class="header-anchor" href="#_1-是什么" aria-hidden="true">#</a> 1. 是什么？</h3><ul><li>I/O: 网络I/O</li><li>多路：多个客户端连接（连接就是套接字描述符，即socket或者channel）</li><li>复用：复用一个或几个线程。也就是说一个或一组线程处理多个TCP连接，使用单进程就能实现同时处理多个客户端的连接</li><li>一句话：一个服务端进程可以同时处理多个套接字描述符；其发展可以分select-&gt;poll-&gt;epoll三个阶段来描述的</li></ul><h3 id="_2-概念" tabindex="-1"><a class="header-anchor" href="#_2-概念" aria-hidden="true">#</a> 2. 概念</h3><ul><li>同步 <ul><li>调用者要一直等待调用结果的通知后才能进行后续的执行，现在就要，我可以等，等出结果为止</li></ul></li><li>异步 <ul><li>指被调用方先返回应答让调用者先回去，然后再计算调用结果，计算完最终结果后再通知并返回给调用方</li><li>异步调用要想获得结果一般通过回调</li></ul></li><li>同步与异步的理解 <ul><li>同步、异步的讨论对象是被调用者（服务提供者），重点在于获得调用结果的消息通知方式上</li></ul></li><li>阻塞 <ul><li>调用方一直在等待而且别的事情什么都不做，当前进/线程会被挂起，啥都不干</li></ul></li><li>非阻塞 <ul><li>调用在发出去后，调用方先去忙别的事情，不会阻塞当前进/线程，而会立即返回</li></ul></li><li>阻塞与非阻塞的理解 <ul><li>阻塞、非阻塞的讨论对象是调用者（服务请求者），重点在于等消息时候的行为，调用者是否能干其它事</li></ul></li></ul><h3 id="_3-i-o多路复用" tabindex="-1"><a class="header-anchor" href="#_3-i-o多路复用" aria-hidden="true">#</a> 3. I/O多路复用</h3><ul><li>redis利用epoll来实现IO多路复用，将连接信息和事件放在队列中，依次放到文件事件分派器，事件分派器将事件分发给事件处理器</li><li>所谓 I/O 多路复用机制，就是说通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。这种机制的使用需要 select 、 poll 、 epoll 来配合。多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li></ul><h3 id="_4-select" tabindex="-1"><a class="header-anchor" href="#_4-select" aria-hidden="true">#</a> 4. select</h3><ul><li>select方式，既做到了一个线程处理多个客户端连接（文件描述符），又减少了系统调用的开销（多个文件描述符只有一次 select 的系统调用 + N次就绪状态的文件描述符的 read 系统调用</li></ul><h3 id="_5-poll" tabindex="-1"><a class="header-anchor" href="#_5-poll" aria-hidden="true">#</a> 5. poll</h3><ul><li>poll使用pollfd数组来代替select中的bitmap，数组没有1024的限制，可以一次管理更多的client。它和 select 的主要区别就是，去掉了 select 只能监听 1024 个文件描述符的限制</li><li>当pollfds数组中有事件发生，相应的revents置位为1，遍历的时候又置位回零，实现了pollfd数组的重用</li><li>问题 <ul><li>poll 解决了select缺点中的前两条，其本质原理还是select的方法，还存在select中原来的问题 <ul><li>pollfds数组拷贝到了内核态，仍然有开销</li><li>poll并没有通知用户态哪一个socket有数据，仍然需要O(n)的遍历</li></ul></li></ul></li></ul><h3 id="_6-epoll" tabindex="-1"><a class="header-anchor" href="#_6-epoll" aria-hidden="true">#</a> 6. epoll</h3><ul><li>三步调用 <ul><li>epoll_create <ul><li>创建一个epoll句柄</li></ul></li><li>epoll_ctl <ul><li>像内核添加、修改或删除要监控的文件描述符</li></ul></li><li>epoll_wait <ul><li>类似发起select()调用</li></ul></li></ul></li><li>结论 <ul><li>epoll是现在最先进的IO多路复用器，Redis、Nginx，linux中的Java NIO都使用的是epoll</li><li>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程</li></ul></li></ul><figure><img src="`+v+'" alt="image-20240213102806318" tabindex="0" loading="lazy"><figcaption>image-20240213102806318</figcaption></figure><h2 id="_13-redis集群" tabindex="-1"><a class="header-anchor" href="#_13-redis集群" aria-hidden="true">#</a> 13. redis集群</h2><h3 id="_1-redis-哨兵" tabindex="-1"><a class="header-anchor" href="#_1-redis-哨兵" aria-hidden="true">#</a> 1. redis 哨兵</h3><ul><li><p>Redis Sentinel 简称 redis哨兵</p></li><li><p>什么是redis sentinel? 有什么用</p><ul><li><p>Redis Sentinel是一个用于监控和管理Redis实例的工具。它可以自动发现Redis实例并监控它们的健康状况，一旦发现实例出现故障，它可以自动进行故障转移，将客户端流量引导到备用实例上，从而确保Redis服务的高可用性。</p><p>Redis Sentinel还可以进行故障恢复、配置管理和通知等功能，使得Redis集群的管理更加简单和可靠</p></li></ul></li><li><p>redis sentinel 如何选择出新的master？</p><ul><li>监测：哨兵会不断地监听所有的redis实例，并收集关于它们健康状态的信息，包括主从关系，延迟等</li><li>判断故障：当哨兵检测到主节点故障时，它会通过与其他哨兵节点进行投票来确认主节点是否真的故障</li><li>选举：如果多个哨兵节点一致认为主节点故障，它们将会进行选举，选择出一个新的主节点</li><li>故障转移：一旦新的主节点被选出，哨兵会通知客户端和其他redis实例，将流量引导到新的主节点</li><li>在进行主节点选择时，Sentinel会考虑实例的健康状况、优先级、配置等因素，以选择最适合的实例作为新的主节点。这样可以确保新的主节点能够提供高性能和高可用性的服务。</li></ul></li><li><p>redis sentinel 可以防止脑裂么？</p><ul><li>脑裂 <ul><li>redis脑裂是指在redis集群中, 由于网络分区或故障，导致主节点和从节点之间出现数据不一致的情况</li></ul></li><li>redis 脑裂可以通过哨兵来避免，但是不保证100%能解决</li></ul></li></ul><h3 id="_2-redis集群" tabindex="-1"><a class="header-anchor" href="#_2-redis集群" aria-hidden="true">#</a> 2. redis集群</h3><ul><li><p>redis cluster的哈希槽为啥是16384个？</p><ul><li><p>16384 = 2的14次方，如果槽位是65536个，发送心跳信息的消息头是65536/8/1024 = 8k；如果槽位是16384个，发送心跳信息的消息头是16384/8/1024 = 2k。因为redis每秒都会发送一定数量的心跳包，如果消息头是8k,未免有些太大了，浪费网络资源</p></li><li><p>其次redis集群的主节点一般都不会超过1000个，对于节点在1000个以内的redis集群，16384个槽位完全够用</p></li><li><p>槽位越小，节点少的情况下，压缩比高，容易传输。redis主节点的配置信息中它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中会进行bitmap压缩，bitmap 填充率 = slots /N (N表示节点数)，也就是说slots越小，填充率就会越小，压缩率就会越高，传输效率就会越高</p></li><li><p>补充</p><ul><li>redis集群并没有使用一致性hash而是引入了哈希槽的概念，每个key通过crc16校验后对16384取模来决定放置哪个槽，CRC16实际有16bit，可以产生2的16次方=65536个</li></ul></li></ul></li></ul><h2 id="_14-redis的大key" tabindex="-1"><a class="header-anchor" href="#_14-redis的大key" aria-hidden="true">#</a> 14. redis的大key</h2><h3 id="_1-排查大key" tabindex="-1"><a class="header-anchor" href="#_1-排查大key" aria-hidden="true">#</a> 1. 排查大key</h3><ul><li>命令 <ul><li>bigkeys</li></ul></li></ul><h3 id="_2-处理方法" tabindex="-1"><a class="header-anchor" href="#_2-处理方法" aria-hidden="true">#</a> 2. 处理方法</h3><ol><li>数据结构重新设计，将大key拆分为多个小key</li><li>大key的数据迁移到数据库</li><li>读取大key可以采用分页或流式读取的方法，逐步消费数据</li></ol><h2 id="_15-redis事物" tabindex="-1"><a class="header-anchor" href="#_15-redis事物" aria-hidden="true">#</a> 15. redis事物</h2><h3 id="_1-redis事物支持原子性吗" tabindex="-1"><a class="header-anchor" href="#_1-redis事物支持原子性吗" aria-hidden="true">#</a> 1. redis事物支持原子性吗</h3><ul><li>支持，Redis使用MULTI、EXEC、WATCH等命令来实现事务，当调用EXEC命令执行事务时，Redis会保证事务块内的命令序列是原子地被执行，中间不会被其他命令插队</li></ul><h3 id="_2-redis事物有什么缺陷" tabindex="-1"><a class="header-anchor" href="#_2-redis事物有什么缺陷" aria-hidden="true">#</a> 2. redis事物有什么缺陷</h3><ul><li>不支持事物回滚</li><li>WATCH命令用于实现CAS（Compare and Swap）操作，它可以监视一个或多个键，如果在EXEC命令执行前，被监视的键发生了变化，则整个事务会取消执行。但是，WATCH是乐观锁机制，不能保证在高并发场景下一定能成功锁定资源</li><li>Redis在事务执行阶段（EXEC命令前）不会对命令进行语法校验，只有真正执行时才会发现错误。这在一定程度上降低了开发调试阶段的便利性</li></ul><h3 id="_3-解决方案" tabindex="-1"><a class="header-anchor" href="#_3-解决方案" aria-hidden="true">#</a> 3. 解决方案？</h3><ul><li>事前检查</li><li><strong>使用WATCH命令</strong>： 对于需要依赖外部条件的事务，可以通过WATCH命令配合MULTI/EXEC来实现有条件的操作，确保在事务执行前数据未发生变化</li><li>手动补救措施</li><li>在事物执行失败后，编写相应的补救逻辑</li><li>设计事物时考虑幂等性</li></ul>',129),g=[b];function f(y,_){return s(),a("div",null,g)}const w=n(h,[["render",f],["__file","redis.html.vue"]]);export{w as default};
